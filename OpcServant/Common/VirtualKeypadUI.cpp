//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: VirtualKeypadUI.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "VirtualKeypadUI.h"


// Declare the bitmap loading function
extern void wxCrafter7TPDlEInitBitmapResources();

static bool bBitmapLoaded = false;


VirtualKeypadBase::VirtualKeypadBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafter7TPDlEInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer3 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer3);
    
    flexGridSizer7 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer7->SetFlexibleDirection( wxBOTH );
    flexGridSizer7->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer7->AddGrowableCol(0);
    
    boxSizer3->Add(flexGridSizer7, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_textEntry = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_textEntryFont(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_textEntry->SetFont(m_textEntryFont);
    #if wxVERSION_NUMBER >= 3000
    m_textEntry->SetHint(wxT(""));
    #endif
    
    flexGridSizer7->Add(m_textEntry, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button13 = new wxButton(this, wxID_ANY, _("<-"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button13Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button13->SetFont(m_button13Font);
    
    flexGridSizer7->Add(m_button13, 1, wxALL, WXC_FROM_DIP(5));
    
    gridSizer5 = new wxGridSizer(0, 3, 0, 0);
    
    boxSizer3->Add(gridSizer5, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button37123 = new wxButton(this, wxID_ANY, _("1"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button37123Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button37123->SetFont(m_button37123Font);
    
    gridSizer5->Add(m_button37123, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button3712 = new wxButton(this, wxID_ANY, _("2"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button3712Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button3712->SetFont(m_button3712Font);
    
    gridSizer5->Add(m_button3712, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button371 = new wxButton(this, wxID_ANY, _("3"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button371Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button371->SetFont(m_button371Font);
    
    gridSizer5->Add(m_button371, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button37456 = new wxButton(this, wxID_ANY, _("4"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button37456Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button37456->SetFont(m_button37456Font);
    
    gridSizer5->Add(m_button37456, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button3745 = new wxButton(this, wxID_ANY, _("5"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button3745Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button3745->SetFont(m_button3745Font);
    
    gridSizer5->Add(m_button3745, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button374 = new wxButton(this, wxID_ANY, _("6"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button374Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button374->SetFont(m_button374Font);
    
    gridSizer5->Add(m_button374, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button3778910 = new wxButton(this, wxID_ANY, _("7"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button3778910Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button3778910->SetFont(m_button3778910Font);
    
    gridSizer5->Add(m_button3778910, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button37789 = new wxButton(this, wxID_ANY, _("8"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button37789Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button37789->SetFont(m_button37789Font);
    
    gridSizer5->Add(m_button37789, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button3778 = new wxButton(this, wxID_ANY, _("9"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button3778Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button3778->SetFont(m_button3778Font);
    
    gridSizer5->Add(m_button3778, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button37711 = new wxButton(this, wxID_ANY, _("."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button37711Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button37711->SetFont(m_button37711Font);
    
    gridSizer5->Add(m_button37711, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button377 = new wxButton(this, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button377Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button377->SetFont(m_button377Font);
    
    gridSizer5->Add(m_button377, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button37 = new wxButton(this, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button37Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button37->SetFont(m_button37Font);
    
    gridSizer5->Add(m_button37, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    gridSizer9 = new wxGridSizer(0, 3, 0, 0);
    
    boxSizer3->Add(gridSizer9, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button50 = new wxButton(this, wxID_OK, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button50Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button50->SetFont(m_button50Font);
    
    gridSizer9->Add(m_button50, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    gridSizer9->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));
    
    m_button54 = new wxButton(this, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button54Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button54->SetFont(m_button54Font);
    
    gridSizer9->Add(m_button54, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    SetName(wxT("VirtualKeypadBase"));
    SetSize(wxDLG_UNIT(this, wxSize(500,500)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxHORIZONTAL);
    } else {
        CentreOnScreen(wxHORIZONTAL);
    }
    // Connect events
    m_button13->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::onBack), NULL, this);
    m_button37123->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_1), NULL, this);
    m_button3712->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_2), NULL, this);
    m_button371->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_3), NULL, this);
    m_button37456->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_4), NULL, this);
    m_button3745->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_5), NULL, this);
    m_button374->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_6), NULL, this);
    m_button3778910->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_7), NULL, this);
    m_button37789->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_8), NULL, this);
    m_button3778->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_9), NULL, this);
    m_button37711->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_dp), NULL, this);
    m_button377->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_0), NULL, this);
    m_button37->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_minus), NULL, this);
    m_button50->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::onOK), NULL, this);
    m_button54->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::onCancel), NULL, this);
    
}

VirtualKeypadBase::~VirtualKeypadBase()
{
    m_button13->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::onBack), NULL, this);
    m_button37123->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_1), NULL, this);
    m_button3712->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_2), NULL, this);
    m_button371->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_3), NULL, this);
    m_button37456->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_4), NULL, this);
    m_button3745->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_5), NULL, this);
    m_button374->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_6), NULL, this);
    m_button3778910->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_7), NULL, this);
    m_button37789->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_8), NULL, this);
    m_button3778->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_9), NULL, this);
    m_button37711->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_dp), NULL, this);
    m_button377->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_0), NULL, this);
    m_button37->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_minus), NULL, this);
    m_button50->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::onOK), NULL, this);
    m_button54->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::onCancel), NULL, this);
    
}

ButtonImages::ButtonImages()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafter7TPDlEInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("m_off"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("m_off"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("m_on"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("m_on"), bmp));
        }
    }
    
}

ButtonImages::~ButtonImages()
{
}

VkTextControlBase::VkTextControlBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafter7TPDlEInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    flexGridSizer63 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer63->SetFlexibleDirection( wxBOTH );
    flexGridSizer63->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer63->AddGrowableCol(0);
    this->SetSizer(flexGridSizer63);
    
    m_text = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_text->SetHint(wxT(""));
    #endif
    
    flexGridSizer63->Add(m_text, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_button67 = new wxButton(this, wxID_ANY, _("^"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer63->Add(m_button67, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_button67->SetMinSize(wxSize(32,32));
    
    SetName(wxT("VkTextControlBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1,-1)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    m_button67->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VkTextControlBase::onOpen), NULL, this);
    
}

VkTextControlBase::~VkTextControlBase()
{
    m_button67->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VkTextControlBase::onOpen), NULL, this);
    
}

VKeyboardPanelBase::VKeyboardPanelBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafter7TPDlEInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer71 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer71);
    
    boxSizer75 = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizer71->Add(boxSizer75, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_textEntry = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    m_textEntry->SetHint(wxT(""));
    #endif
    
    boxSizer75->Add(m_textEntry, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button81 = new wxButton(this, wxID_DELETE, _("Del"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer75->Add(m_button81, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    gridSizer77 = new wxGridSizer(0, 10, 0, 0);
    
    boxSizer71->Add(gridSizer77, 3, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    n_key1 = new wxButton(this, 20000, _("1"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(n_key1, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_key2 = new wxButton(this, 20001, _("2"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_key2, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_key3 = new wxButton(this, 20002, _("3"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_key3, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_key4 = new wxButton(this, 20003, _("4"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_key4, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_key5 = new wxButton(this, 20004, _("5"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_key5, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_key6 = new wxButton(this, 20005, _("6"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_key6, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_key7 = new wxButton(this, 20006, _("7"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_key7, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_key8 = new wxButton(this, 20007, _("8"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_key8, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_key9 = new wxButton(this, 20008, _("9"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_key9, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_key0 = new wxButton(this, 20009, _("0"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_key0, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyA = new wxButton(this, 20010, _("A"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyA, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyB = new wxButton(this, 20011, _("B"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyB, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyC = new wxButton(this, 20012, _("C"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyC, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyD = new wxButton(this, 20013, _("D"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyD, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyE = new wxButton(this, 20014, _("E"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyE, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyF = new wxButton(this, 20015, _("F"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyF, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyG = new wxButton(this, 20016, _("G"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyG, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyH = new wxButton(this, 20017, _("H"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyH, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyI = new wxButton(this, 20018, _("I"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyI, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyJ = new wxButton(this, 20019, _("J"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyJ, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyK = new wxButton(this, 20020, _("K"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyK, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyL = new wxButton(this, 20021, _("L"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyL, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyM = new wxButton(this, 20022, _("M"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyM, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyN = new wxButton(this, 20023, _("N"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyN, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyO = new wxButton(this, 20024, _("O"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyO, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyP = new wxButton(this, 20025, _("P"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyP, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyQ = new wxButton(this, 20026, _("Q"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyQ, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyR = new wxButton(this, 20027, _("R"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyR, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyS = new wxButton(this, 20028, _("S"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyS, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyT = new wxButton(this, 20029, _("T"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyT, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyU = new wxButton(this, 20030, _("U"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyU, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyV = new wxButton(this, 20031, _("V"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyV, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyW = new wxButton(this, 20032, _("W"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyW, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyX = new wxButton(this, 20033, _("X"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyX, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyY = new wxButton(this, 20034, _("Y"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyY, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyZ = new wxButton(this, 20035, _("Z"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyZ, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyDot = new wxButton(this, 20036, _("."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyDot, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyMinus = new wxButton(this, 20037, _("-"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyMinus, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyUS = new wxButton(this, 20038, _("_"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keyUS, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keySlash = new wxButton(this, 20039, _("/"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer77->Add(m_keySlash, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    gridSizer227 = new wxGridSizer(0, 3, 0, 0);
    
    boxSizer71->Add(gridSizer227, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_space = new wxButton(this, 20040, _("Space"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer227->Add(m_space, 1, wxALL|wxEXPAND|wxALIGN_CENTER|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    SetName(wxT("VKeyboardPanelBase"));
    SetSize(wxDLG_UNIT(this, wxSize(700,400)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    m_button81->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onDelete), NULL, this);
    n_key1->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_key2->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_key3->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_key4->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_key5->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_key6->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_key7->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_key8->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_key9->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_key0->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyA->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyB->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyC->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyD->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyE->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyF->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyG->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyH->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyI->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyJ->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyK->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyL->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyM->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyN->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyO->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyP->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyQ->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyR->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyS->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyT->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyU->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyV->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyW->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyX->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyY->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyZ->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyDot->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyMinus->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyUS->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keySlash->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_space->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    
}

VKeyboardPanelBase::~VKeyboardPanelBase()
{
    m_button81->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onDelete), NULL, this);
    n_key1->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_key2->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_key3->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_key4->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_key5->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_key6->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_key7->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_key8->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_key9->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_key0->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyA->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyB->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyC->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyD->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyE->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyF->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyG->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyH->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyI->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyJ->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyK->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyL->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyM->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyN->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyO->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyP->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyQ->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyR->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyS->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyT->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyU->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyV->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyW->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyX->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyY->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyZ->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyDot->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyMinus->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keyUS->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_keySlash->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    m_space->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VKeyboardPanelBase::onChar), NULL, this);
    
}

TextSpinBase::TextSpinBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafter7TPDlEInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer499 = new wxBoxSizer(wxHORIZONTAL);
    this->SetSizer(boxSizer499);
    
    m_text = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_text->SetHint(wxT(""));
    #endif
    
    boxSizer499->Add(m_text, 2, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_up = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_up->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("up")), wxLEFT);
    m_up->SetBitmapMargins(2,2);
    #endif
    
    boxSizer499->Add(m_up, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_down = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_down->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("down")), wxLEFT);
    m_down->SetBitmapMargins(2,2);
    #endif
    
    boxSizer499->Add(m_down, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    SetName(wxT("TextSpinBase"));
    SetSize(wxDLG_UNIT(this, wxSize(500,64)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    m_up->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(TextSpinBase::onUp), NULL, this);
    m_down->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(TextSpinBase::onDown), NULL, this);
    
}

TextSpinBase::~TextSpinBase()
{
    m_up->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(TextSpinBase::onUp), NULL, this);
    m_down->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(TextSpinBase::onDown), NULL, this);
    
}

ToggleOptionBase::ToggleOptionBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafter7TPDlEInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    flexGridSizer257 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer257->SetFlexibleDirection( wxBOTH );
    flexGridSizer257->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer257->AddGrowableCol(1);
    this->SetSizer(flexGridSizer257);
    
    m_label = new wxStaticText(this, wxID_ANY, _("Static Text Label"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_labelFont(16, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Ubuntu"));
    m_label->SetFont(m_labelFont);
    
    flexGridSizer257->Add(m_label, 0, wxALL|wxALIGN_CENTER, WXC_FROM_DIP(5));
    
    m_button = new SliderSwitch(this, wxID_ANY, _("On"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_button->SetValue(true);
    
    flexGridSizer257->Add(m_button, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    m_button->SetMinSize(wxSize(-1,48));
    
    SetName(wxT("ToggleOptionBase"));
    SetSize(wxDLG_UNIT(this, wxSize(300,64)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
}

ToggleOptionBase::~ToggleOptionBase()
{
}

VirtualKeypadTimeBase::VirtualKeypadTimeBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafter7TPDlEInitBitmapResources();
        bBitmapLoaded = true;
    }
    this->Hide();
    
    boxSizer31 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer31);
    
    flexGridSizer72 = new wxFlexGridSizer(0, 5, 0, 0);
    flexGridSizer72->SetFlexibleDirection( wxBOTH );
    flexGridSizer72->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer72->AddGrowableCol(0);
    flexGridSizer72->AddGrowableCol(2);
    flexGridSizer72->AddGrowableCol(4);
    flexGridSizer72->AddGrowableRow(0);
    
    boxSizer31->Add(flexGridSizer72, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_hour = new wxTextCtrl(this, wxID_ANY, wxT("00"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_READONLY|wxTE_CENTRE);
    wxFont m_hourFont(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_hour->SetFont(m_hourFont);
    #if wxVERSION_NUMBER >= 3000
    m_hour->SetHint(wxT(""));
    #endif
    
    flexGridSizer72->Add(m_hour, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText324 = new wxStaticText(this, wxID_ANY, _(":"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText324Font(20, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Ubuntu"));
    m_staticText324->SetFont(m_staticText324Font);
    
    flexGridSizer72->Add(m_staticText324, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_minute = new wxTextCtrl(this, wxID_ANY, wxT("00"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_READONLY|wxTE_CENTRE);
    wxFont m_minuteFont(20, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Ubuntu"));
    m_minute->SetFont(m_minuteFont);
    #if wxVERSION_NUMBER >= 3000
    m_minute->SetHint(wxT(""));
    #endif
    
    flexGridSizer72->Add(m_minute, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText328 = new wxStaticText(this, wxID_ANY, _(":"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText328Font(20, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Ubuntu"));
    m_staticText328->SetFont(m_staticText328Font);
    
    flexGridSizer72->Add(m_staticText328, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_second = new wxTextCtrl(this, wxID_ANY, wxT("00"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_READONLY|wxTE_CENTRE);
    wxFont m_secondFont(20, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Ubuntu"));
    m_second->SetFont(m_secondFont);
    #if wxVERSION_NUMBER >= 3000
    m_second->SetHint(wxT(""));
    #endif
    
    flexGridSizer72->Add(m_second, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer482 = new wxFlexGridSizer(0, 8, 0, 0);
    flexGridSizer482->SetFlexibleDirection( wxBOTH );
    flexGridSizer482->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer482->AddGrowableCol(0);
    flexGridSizer482->AddGrowableCol(1);
    flexGridSizer482->AddGrowableCol(3);
    flexGridSizer482->AddGrowableCol(4);
    flexGridSizer482->AddGrowableCol(6);
    flexGridSizer482->AddGrowableCol(7);
    flexGridSizer482->AddGrowableRow(0);
    
    boxSizer31->Add(flexGridSizer482, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_buttonHoursUp = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_buttonHoursUp->SetBitmap(wxArtProvider::GetBitmap(wxART_GO_UP, wxART_TOOLBAR, wxDefaultSize), wxLEFT);
    m_buttonHoursUp->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer482->Add(m_buttonHoursUp, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_buttonHoursDown = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_buttonHoursDown->SetBitmap(wxArtProvider::GetBitmap(wxART_GO_DOWN, wxART_TOOLBAR, wxDefaultSize), wxLEFT);
    m_buttonHoursDown->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer482->Add(m_buttonHoursDown, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText488 = new wxStaticText(this, wxID_ANY, _("."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer482->Add(m_staticText488, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_buttonMinUp = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_buttonMinUp->SetBitmap(wxArtProvider::GetBitmap(wxART_GO_UP, wxART_TOOLBAR, wxDefaultSize), wxLEFT);
    m_buttonMinUp->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer482->Add(m_buttonMinUp, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_buttonMinDown = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_buttonMinDown->SetBitmap(wxArtProvider::GetBitmap(wxART_GO_DOWN, wxART_TOOLBAR, wxDefaultSize), wxLEFT);
    m_buttonMinDown->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer482->Add(m_buttonMinDown, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText494 = new wxStaticText(this, wxID_ANY, _("."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer482->Add(m_staticText494, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_buttonSecUp = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_buttonSecUp->SetBitmap(wxArtProvider::GetBitmap(wxART_GO_UP, wxART_TOOLBAR, wxDefaultSize), wxLEFT);
    m_buttonSecUp->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer482->Add(m_buttonSecUp, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_buttonSecDown = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_buttonSecDown->SetBitmap(wxArtProvider::GetBitmap(wxART_GO_DOWN, wxART_TOOLBAR, wxDefaultSize), wxLEFT);
    m_buttonSecDown->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer482->Add(m_buttonSecDown, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    gridSizer918 = new wxGridSizer(0, 3, 0, 0);
    
    boxSizer31->Add(gridSizer918, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button5019 = new wxButton(this, wxID_OK, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button5019Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button5019->SetFont(m_button5019Font);
    
    gridSizer918->Add(m_button5019, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    gridSizer918->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));
    
    m_button5421 = new wxButton(this, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button5421Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button5421->SetFont(m_button5421Font);
    
    gridSizer918->Add(m_button5421, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    SetName(wxT("VirtualKeypadTimeBase"));
    SetSize(wxDLG_UNIT(this, wxSize(800,600)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxHORIZONTAL);
    } else {
        CentreOnScreen(wxHORIZONTAL);
    }
    // Connect events
    m_buttonHoursUp->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadTimeBase::onHourUp), NULL, this);
    m_buttonHoursDown->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadTimeBase::onHourDown), NULL, this);
    m_buttonMinUp->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadTimeBase::onMinUp), NULL, this);
    m_buttonMinDown->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadTimeBase::onMinDown), NULL, this);
    m_buttonSecUp->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadTimeBase::onSecUp), NULL, this);
    m_buttonSecDown->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadTimeBase::onSecDown), NULL, this);
    
}

VirtualKeypadTimeBase::~VirtualKeypadTimeBase()
{
    m_buttonHoursUp->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadTimeBase::onHourUp), NULL, this);
    m_buttonHoursDown->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadTimeBase::onHourDown), NULL, this);
    m_buttonMinUp->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadTimeBase::onMinUp), NULL, this);
    m_buttonMinDown->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadTimeBase::onMinDown), NULL, this);
    m_buttonSecUp->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadTimeBase::onSecUp), NULL, this);
    m_buttonSecDown->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadTimeBase::onSecDown), NULL, this);
    
}

VirtualKeypadDateBase::VirtualKeypadDateBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafter7TPDlEInitBitmapResources();
        bBitmapLoaded = true;
    }
    this->Hide();
    
    boxSizer3122 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer3122);
    
    flexGridSizer7223 = new wxFlexGridSizer(0, 5, 0, 0);
    flexGridSizer7223->SetFlexibleDirection( wxBOTH );
    flexGridSizer7223->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer7223->AddGrowableCol(0);
    flexGridSizer7223->AddGrowableCol(2);
    flexGridSizer7223->AddGrowableCol(4);
    flexGridSizer7223->AddGrowableRow(0);
    
    boxSizer3122->Add(flexGridSizer7223, 3, wxEXPAND, WXC_FROM_DIP(5));
    
    m_year = new wxTextCtrl(this, wxID_ANY, wxT("2000"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_READONLY|wxTE_CENTRE);
    wxFont m_yearFont(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_year->SetFont(m_yearFont);
    m_year->SetToolTip(_("Year"));
    #if wxVERSION_NUMBER >= 3000
    m_year->SetHint(wxT(""));
    #endif
    
    flexGridSizer7223->Add(m_year, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText330 = new wxStaticText(this, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText330Font(20, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Ubuntu"));
    m_staticText330->SetFont(m_staticText330Font);
    
    flexGridSizer7223->Add(m_staticText330, 1, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_month = new wxTextCtrl(this, wxID_ANY, wxT("Jan"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_READONLY|wxTE_CENTRE);
    wxFont m_monthFont(20, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Ubuntu"));
    m_month->SetFont(m_monthFont);
    m_month->SetToolTip(_("Month"));
    #if wxVERSION_NUMBER >= 3000
    m_month->SetHint(wxT(""));
    #endif
    
    flexGridSizer7223->Add(m_month, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText332 = new wxStaticText(this, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText332Font(20, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Ubuntu"));
    m_staticText332->SetFont(m_staticText332Font);
    
    flexGridSizer7223->Add(m_staticText332, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_day = new wxTextCtrl(this, wxID_ANY, wxT("01"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_READONLY|wxTE_CENTRE);
    wxFont m_dayFont(20, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Ubuntu"));
    m_day->SetFont(m_dayFont);
    m_day->SetToolTip(_("Day"));
    #if wxVERSION_NUMBER >= 3000
    m_day->SetHint(wxT(""));
    #endif
    
    flexGridSizer7223->Add(m_day, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText334 = new wxStaticText(this, wxID_ANY, _("Year"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer7223->Add(m_staticText334, 0, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    flexGridSizer7223->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));
    
    m_staticText336 = new wxStaticText(this, wxID_ANY, _("Month"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer7223->Add(m_staticText336, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    flexGridSizer7223->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));
    
    m_staticText338 = new wxStaticText(this, wxID_ANY, _("Day"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer7223->Add(m_staticText338, 0, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    flexGridSizer464 = new wxFlexGridSizer(0, 8, 0, 0);
    flexGridSizer464->SetFlexibleDirection( wxBOTH );
    flexGridSizer464->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer464->AddGrowableCol(0);
    flexGridSizer464->AddGrowableCol(1);
    flexGridSizer464->AddGrowableCol(3);
    flexGridSizer464->AddGrowableCol(4);
    flexGridSizer464->AddGrowableCol(6);
    flexGridSizer464->AddGrowableCol(7);
    flexGridSizer464->AddGrowableRow(0);
    
    boxSizer3122->Add(flexGridSizer464, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_buttonYearUp = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_buttonYearUp->SetBitmap(wxArtProvider::GetBitmap(wxART_GO_UP, wxART_TOOLBAR, wxDefaultSize), wxLEFT);
    m_buttonYearUp->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer464->Add(m_buttonYearUp, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_buttonYearDown = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_buttonYearDown->SetBitmap(wxArtProvider::GetBitmap(wxART_GO_DOWN, wxART_TOOLBAR, wxDefaultSize), wxLEFT);
    m_buttonYearDown->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer464->Add(m_buttonYearDown, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText470 = new wxStaticText(this, wxID_ANY, _("."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer464->Add(m_staticText470, 0, wxALL, WXC_FROM_DIP(5));
    
    m_buttonMonthUp = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_buttonMonthUp->SetBitmap(wxArtProvider::GetBitmap(wxART_GO_UP, wxART_TOOLBAR, wxDefaultSize), wxLEFT);
    m_buttonMonthUp->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer464->Add(m_buttonMonthUp, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_buttonMonthDown = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_buttonMonthDown->SetBitmap(wxArtProvider::GetBitmap(wxART_GO_DOWN, wxART_TOOLBAR, wxDefaultSize), wxLEFT);
    m_buttonMonthDown->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer464->Add(m_buttonMonthDown, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText476 = new wxStaticText(this, wxID_ANY, _("."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer464->Add(m_staticText476, 0, wxALL, WXC_FROM_DIP(5));
    
    m_buttonDayUp = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_buttonDayUp->SetBitmap(wxArtProvider::GetBitmap(wxART_GO_UP, wxART_TOOLBAR, wxDefaultSize), wxLEFT);
    m_buttonDayUp->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer464->Add(m_buttonDayUp, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_buttonDayDown = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_buttonDayDown->SetBitmap(wxArtProvider::GetBitmap(wxART_GO_DOWN, wxART_TOOLBAR, wxDefaultSize), wxLEFT);
    m_buttonDayDown->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer464->Add(m_buttonDayDown, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    gridSizer91838 = new wxGridSizer(0, 3, 0, 0);
    
    boxSizer3122->Add(gridSizer91838, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    m_button501939 = new wxButton(this, wxID_OK, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button501939Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button501939->SetFont(m_button501939Font);
    
    gridSizer91838->Add(m_button501939, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    gridSizer91838->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));
    
    m_button542141 = new wxButton(this, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button542141Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button542141->SetFont(m_button542141Font);
    
    gridSizer91838->Add(m_button542141, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    SetName(wxT("VirtualKeypadDateBase"));
    SetSize(wxDLG_UNIT(this, wxSize(800,600)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxHORIZONTAL);
    } else {
        CentreOnScreen(wxHORIZONTAL);
    }
    // Connect events
    m_buttonYearUp->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadDateBase::onYearUp), NULL, this);
    m_buttonYearDown->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadDateBase::onYearDown), NULL, this);
    m_buttonMonthUp->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadDateBase::onMonthUp), NULL, this);
    m_buttonMonthDown->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadDateBase::onMonthDown), NULL, this);
    m_buttonDayUp->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadDateBase::onDayUp), NULL, this);
    m_buttonDayDown->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadDateBase::onDayDown), NULL, this);
    
}

VirtualKeypadDateBase::~VirtualKeypadDateBase()
{
    m_buttonYearUp->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadDateBase::onYearUp), NULL, this);
    m_buttonYearDown->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadDateBase::onYearDown), NULL, this);
    m_buttonMonthUp->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadDateBase::onMonthUp), NULL, this);
    m_buttonMonthDown->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadDateBase::onMonthDown), NULL, this);
    m_buttonDayUp->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadDateBase::onDayUp), NULL, this);
    m_buttonDayDown->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadDateBase::onDayDown), NULL, this);
    
}

VTextEntryDialogBase::VTextEntryDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafter7TPDlEInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer711 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer711);
    
    boxSizer752 = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizer711->Add(boxSizer752, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_textEntry = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textEntry->SetHint(wxT(""));
    #endif
    
    boxSizer752->Add(m_textEntry, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button814 = new wxButton(this, wxID_DELETE, _("<-"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer752->Add(m_button814, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    gridSizer775 = new wxGridSizer(0, 10, 0, 0);
    
    boxSizer711->Add(gridSizer775, 3, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    n_key16 = new wxButton(this, 20000, _("1"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(n_key16, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_key27 = new wxButton(this, 20001, _("2"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_key27, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_key38 = new wxButton(this, 20002, _("3"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_key38, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_key49 = new wxButton(this, 20003, _("4"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_key49, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_key510 = new wxButton(this, 20004, _("5"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_key510, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_key611 = new wxButton(this, 20005, _("6"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_key611, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_key712 = new wxButton(this, 20006, _("7"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_key712, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_key813 = new wxButton(this, 20007, _("8"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_key813, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_key914 = new wxButton(this, 20008, _("9"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_key914, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_key015 = new wxButton(this, 20009, _("0"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_key015, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyA16 = new wxButton(this, 20010, _("A"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyA16, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyB17 = new wxButton(this, 20011, _("B"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyB17, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyC18 = new wxButton(this, 20012, _("C"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyC18, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyD19 = new wxButton(this, 20013, _("D"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyD19, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyE20 = new wxButton(this, 20014, _("E"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyE20, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyF21 = new wxButton(this, 20015, _("F"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyF21, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyG22 = new wxButton(this, 20016, _("G"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyG22, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyH23 = new wxButton(this, 20017, _("H"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyH23, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyI24 = new wxButton(this, 20018, _("I"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyI24, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyJ25 = new wxButton(this, 20019, _("J"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyJ25, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyK26 = new wxButton(this, 20020, _("K"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyK26, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyL27 = new wxButton(this, 20021, _("L"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyL27, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyM28 = new wxButton(this, 20022, _("M"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyM28, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyN29 = new wxButton(this, 20023, _("N"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyN29, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyO30 = new wxButton(this, 20024, _("O"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyO30, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyP31 = new wxButton(this, 20025, _("P"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyP31, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyQ32 = new wxButton(this, 20026, _("Q"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyQ32, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyR33 = new wxButton(this, 20027, _("R"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyR33, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyS34 = new wxButton(this, 20028, _("S"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyS34, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyT35 = new wxButton(this, 20029, _("T"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyT35, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyU36 = new wxButton(this, 20030, _("U"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyU36, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyV37 = new wxButton(this, 20031, _("V"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyV37, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyW38 = new wxButton(this, 20032, _("W"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyW38, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyX39 = new wxButton(this, 20033, _("X"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyX39, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyY40 = new wxButton(this, 20034, _("Y"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyY40, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyZ41 = new wxButton(this, 20035, _("Z"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyZ41, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyDot42 = new wxButton(this, 20036, _("."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyDot42, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyMinus43 = new wxButton(this, 20037, _("-"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyMinus43, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keyUS44 = new wxButton(this, 20038, _("_"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keyUS44, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_keySlash45 = new wxButton(this, 20039, _("/"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer775->Add(m_keySlash45, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    gridSizer22746 = new wxGridSizer(0, 3, 0, 0);
    
    boxSizer711->Add(gridSizer22746, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_capsLock = new wxToggleButton(this, wxID_ANY, _("CAPS"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_capsLock->SetValue(true);
    
    gridSizer22746->Add(m_capsLock, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_space47 = new wxButton(this, 20040, _("Space"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer22746->Add(m_space47, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button541 = new wxButton(this, wxID_ANY, _("Clear"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer22746->Add(m_button541, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    gridSizer22746->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));
    
    m_button460 = new wxButton(this, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer22746->Add(m_button460, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button462 = new wxButton(this, wxID_OK, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer22746->Add(m_button462, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    SetName(wxT("VTextEntryDialogBase"));
    SetSize(wxDLG_UNIT(this, wxSize(500,500)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_button814->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onDelete), NULL, this);
    n_key16->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_key27->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_key38->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_key49->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_key510->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_key611->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_key712->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_key813->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_key914->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_key015->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyA16->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyB17->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyC18->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyD19->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyE20->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyF21->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyG22->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyH23->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyI24->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyJ25->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyK26->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyL27->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyM28->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyN29->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyO30->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyP31->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyQ32->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyR33->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyS34->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyT35->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyU36->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyV37->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyW38->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyX39->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyY40->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyZ41->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyDot42->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyMinus43->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyUS44->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keySlash45->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_capsLock->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onCapsLock), NULL, this);
    m_space47->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_button460->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onCancel), NULL, this);
    m_button462->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onOK), NULL, this);
    
}

VTextEntryDialogBase::~VTextEntryDialogBase()
{
    m_button814->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onDelete), NULL, this);
    n_key16->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_key27->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_key38->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_key49->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_key510->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_key611->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_key712->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_key813->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_key914->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_key015->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyA16->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyB17->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyC18->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyD19->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyE20->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyF21->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyG22->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyH23->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyI24->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyJ25->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyK26->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyL27->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyM28->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyN29->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyO30->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyP31->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyQ32->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyR33->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyS34->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyT35->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyU36->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyV37->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyW38->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyX39->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyY40->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyZ41->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyDot42->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyMinus43->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keyUS44->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_keySlash45->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_capsLock->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onCapsLock), NULL, this);
    m_space47->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onChar), NULL, this);
    m_button460->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onCancel), NULL, this);
    m_button462->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VTextEntryDialogBase::onOK), NULL, this);
    
}

SliderEntryBase::SliderEntryBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafter7TPDlEInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer503 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer503);
    
    m_text = new wxTextCtrl(this, wxID_ANY, wxT("0.0"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_READONLY);
    wxFont m_textFont(16, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Arial Black"));
    m_text->SetFont(m_textFont);
    #if wxVERSION_NUMBER >= 3000
    m_text->SetHint(wxT(""));
    #endif
    
    boxSizer503->Add(m_text, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_slider = new wxSlider(this, wxID_ANY, 50, 0, 100, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxSL_AUTOTICKS|wxSL_HORIZONTAL);
    
    boxSizer503->Add(m_slider, 2, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    m_slider->SetMinSize(wxSize(100,32));
    
    SetName(wxT("SliderEntryBase"));
    SetSize(wxDLG_UNIT(this, wxSize(200,130)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    m_slider->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(SliderEntryBase::onChanged), NULL, this);
    
}

SliderEntryBase::~SliderEntryBase()
{
    m_slider->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(SliderEntryBase::onChanged), NULL, this);
    
}

TextChoiceBase::TextChoiceBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafter7TPDlEInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer511 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer511);
    
    wxArrayString m_listBoxArr;
    m_listBox = new wxListBox(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_listBoxArr, wxLB_SINGLE);
    
    boxSizer511->Add(m_listBox, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_stdBtnSizer517 = new wxStdDialogButtonSizer();
    
    boxSizer511->Add(m_stdBtnSizer517, 0, wxALL, WXC_FROM_DIP(5));
    
    m_button519 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer517->AddButton(m_button519);
    
    m_button521 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer517->AddButton(m_button521);
    m_stdBtnSizer517->Realize();
    
    SetName(wxT("TextChoiceBase"));
    SetSize(wxDLG_UNIT(this, wxSize(500,300)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_button519->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(TextChoiceBase::onOK), NULL, this);
    
}

TextChoiceBase::~TextChoiceBase()
{
    m_button519->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(TextChoiceBase::onOK), NULL, this);
    
}
