//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: VirtualKeypadUI.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "VirtualKeypadUI.h"


// Declare the bitmap loading function
extern void wxCrafter7TPDlEInitBitmapResources();

static bool bBitmapLoaded = false;


VirtualKeypadBase::VirtualKeypadBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafter7TPDlEInitBitmapResources();
        bBitmapLoaded = true;
    }
    this->Hide();
    
    boxSizer3 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer3);
    
    flexGridSizer7 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer7->SetFlexibleDirection( wxBOTH );
    flexGridSizer7->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer7->AddGrowableCol(0);
    
    boxSizer3->Add(flexGridSizer7, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_textEntry = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_textEntryFont(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_textEntry->SetFont(m_textEntryFont);
    #if wxVERSION_NUMBER >= 3000
    m_textEntry->SetHint(wxT(""));
    #endif
    
    flexGridSizer7->Add(m_textEntry, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button13 = new wxButton(this, wxID_ANY, _("DEL"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button13Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button13->SetFont(m_button13Font);
    
    flexGridSizer7->Add(m_button13, 1, wxALL, WXC_FROM_DIP(5));
    
    gridSizer5 = new wxGridSizer(0, 3, 0, 0);
    
    boxSizer3->Add(gridSizer5, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button37123 = new wxButton(this, wxID_ANY, _("1"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button37123Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button37123->SetFont(m_button37123Font);
    
    gridSizer5->Add(m_button37123, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button3712 = new wxButton(this, wxID_ANY, _("2"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button3712Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button3712->SetFont(m_button3712Font);
    
    gridSizer5->Add(m_button3712, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button371 = new wxButton(this, wxID_ANY, _("3"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button371Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button371->SetFont(m_button371Font);
    
    gridSizer5->Add(m_button371, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button37456 = new wxButton(this, wxID_ANY, _("4"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button37456Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button37456->SetFont(m_button37456Font);
    
    gridSizer5->Add(m_button37456, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button3745 = new wxButton(this, wxID_ANY, _("5"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button3745Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button3745->SetFont(m_button3745Font);
    
    gridSizer5->Add(m_button3745, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button374 = new wxButton(this, wxID_ANY, _("6"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button374Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button374->SetFont(m_button374Font);
    
    gridSizer5->Add(m_button374, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button3778910 = new wxButton(this, wxID_ANY, _("7"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button3778910Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button3778910->SetFont(m_button3778910Font);
    
    gridSizer5->Add(m_button3778910, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button37789 = new wxButton(this, wxID_ANY, _("8"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button37789Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button37789->SetFont(m_button37789Font);
    
    gridSizer5->Add(m_button37789, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button3778 = new wxButton(this, wxID_ANY, _("9"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button3778Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button3778->SetFont(m_button3778Font);
    
    gridSizer5->Add(m_button3778, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button37711 = new wxButton(this, wxID_ANY, _("."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button37711Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button37711->SetFont(m_button37711Font);
    
    gridSizer5->Add(m_button37711, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button377 = new wxButton(this, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button377Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button377->SetFont(m_button377Font);
    
    gridSizer5->Add(m_button377, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button37 = new wxButton(this, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button37Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button37->SetFont(m_button37Font);
    
    gridSizer5->Add(m_button37, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    gridSizer9 = new wxGridSizer(0, 3, 0, 0);
    
    boxSizer3->Add(gridSizer9, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button50 = new wxButton(this, wxID_ANY, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button50Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button50->SetFont(m_button50Font);
    
    gridSizer9->Add(m_button50, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    gridSizer9->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));
    
    m_button54 = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_button54Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_button54->SetFont(m_button54Font);
    
    gridSizer9->Add(m_button54, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    SetName(wxT("VirtualKeypadBase"));
    SetSize(wxDLG_UNIT(this, wxSize(500,400)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxHORIZONTAL);
    } else {
        CentreOnScreen(wxHORIZONTAL);
    }
    // Connect events
    m_button13->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::onBack), NULL, this);
    m_button37123->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_1), NULL, this);
    m_button3712->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_2), NULL, this);
    m_button371->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_3), NULL, this);
    m_button37456->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_4), NULL, this);
    m_button3745->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_5), NULL, this);
    m_button374->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_6), NULL, this);
    m_button3778910->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_7), NULL, this);
    m_button37789->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_8), NULL, this);
    m_button3778->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_9), NULL, this);
    m_button37711->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_dp), NULL, this);
    m_button377->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_0), NULL, this);
    m_button37->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_minus), NULL, this);
    m_button50->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::onOK), NULL, this);
    m_button54->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::onCancel), NULL, this);
    
}

VirtualKeypadBase::~VirtualKeypadBase()
{
    m_button13->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::onBack), NULL, this);
    m_button37123->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_1), NULL, this);
    m_button3712->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_2), NULL, this);
    m_button371->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_3), NULL, this);
    m_button37456->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_4), NULL, this);
    m_button3745->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_5), NULL, this);
    m_button374->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_6), NULL, this);
    m_button3778910->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_7), NULL, this);
    m_button37789->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_8), NULL, this);
    m_button3778->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_9), NULL, this);
    m_button37711->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_dp), NULL, this);
    m_button377->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_0), NULL, this);
    m_button37->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::on_minus), NULL, this);
    m_button50->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::onOK), NULL, this);
    m_button54->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VirtualKeypadBase::onCancel), NULL, this);
    
}

ButtonImages::ButtonImages()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafter7TPDlEInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("m_off"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("m_off"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("m_on"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("m_on"), bmp));
        }
    }
    
}

ButtonImages::~ButtonImages()
{
}

VkTextControlBase::VkTextControlBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafter7TPDlEInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    flexGridSizer63 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer63->SetFlexibleDirection( wxBOTH );
    flexGridSizer63->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer63->AddGrowableCol(0);
    this->SetSizer(flexGridSizer63);
    
    m_text = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_text->SetHint(wxT(""));
    #endif
    
    flexGridSizer63->Add(m_text, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_button67 = new wxButton(this, wxID_ANY, _("^"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer63->Add(m_button67, 0, wxALL, WXC_FROM_DIP(1));
    m_button67->SetMinSize(wxSize(32,32));
    
    SetName(wxT("VkTextControlBase"));
    SetSize(wxDLG_UNIT(this, wxSize(128,48)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    m_button67->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VkTextControlBase::onOpen), NULL, this);
    
}

VkTextControlBase::~VkTextControlBase()
{
    m_button67->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(VkTextControlBase::onOpen), NULL, this);
    
}
