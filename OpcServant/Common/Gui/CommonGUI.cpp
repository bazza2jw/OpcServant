//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: BUI.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "CommonGUI.h"


// Declare the bitmap loading function
extern void wxCrafterCommonInitBitmapResources();

static bool bBitmapLoaded = false;


SystemPropertiesDialogBase::SystemPropertiesDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterCommonInitBitmapResources();
        bBitmapLoaded = true;
    }
    this->SetToolTip(_("Basic System Properties Needed At Start"));
    
    boxSizer55 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer55);
    
    wxArrayString m_propertiesArr;
    wxUnusedVar(m_propertiesArr);
    wxArrayInt m_propertiesIntArr;
    wxUnusedVar(m_propertiesIntArr);
    m_properties = new wxPropertyGridManager(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxPG_SPLITTER_AUTO_CENTER|wxPG_BOLD_MODIFIED);
    
    boxSizer55->Add(m_properties, 3, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_siteName = m_properties->Append(  new wxStringProperty( _("Site Name"), wxPG_LABEL, _("Bourbon")) );
    m_siteName->SetHelpString(wxT(""));
    
    m_enableGui = m_properties->Append(  new wxBoolProperty( _("Enable GUI"), wxPG_LABEL, 1) );
    m_enableGui->SetHelpString(_("Enable GUI"));
    
    m_enableWeb = m_properties->Append(  new wxBoolProperty( _("Enable Web"), wxPG_LABEL, 1) );
    m_enableWeb->SetHelpString(_("Enable web interface"));
    
    m_enableOpc = m_properties->Append(  new wxBoolProperty( _("Enable OPC"), wxPG_LABEL, 1) );
    m_enableOpc->SetHelpString(_("Enable OPC server"));
    
    m_useSSL = m_properties->Append(  new wxBoolProperty( _("Use SSL"), wxPG_LABEL, 1) );
    m_useSSL->SetHelpString(wxT(""));
    
    m_mainTab = m_properties->Append(  new wxStringProperty( _("Main Tab"), wxPG_LABEL, _("System")) );
    m_mainTab->SetHelpString(wxT(""));
    
    m_autoPurge = m_properties->Append(  new wxBoolProperty( _("Auto Purge Database"), wxPG_LABEL, 1) );
    m_autoPurge->SetHelpString(_("Enable 90 day purge"));
    
    m_enableVK = m_properties->Append(  new wxBoolProperty( _("Enable VK"), wxPG_LABEL, 0) );
    m_enableVK->SetHelpString(wxT(""));
    m_enableVK->SetEditor( wxT("CheckBox") );
    
    m_screenLock = m_properties->Append(  new wxBoolProperty( _("Screen Lock Enable"), wxPG_LABEL, 0) );
    m_screenLock->SetHelpString(wxT(""));
    
    m_screenLockPin = m_properties->Append(  new wxStringProperty( _("Screen Lock PIN"), wxPG_LABEL, wxT("")) );
    m_screenLockPin->SetHelpString(wxT(""));
    
    m_homePage = m_properties->Append(  new wxStringProperty( _("Home Page"), wxPG_LABEL, wxT("")) );
    m_homePage->SetHelpString(wxT(""));
    
    m_showUrlToolbar = m_properties->Append(  new wxBoolProperty( _("Show URL Toolbar"), wxPG_LABEL, 1) );
    m_showUrlToolbar->SetHelpString(wxT(""));
    m_showUrlToolbar->SetEditor( wxT("CheckBox") );
    
    m_shellProgram = m_properties->Append(  new wxStringProperty( _("Shell Program"), wxPG_LABEL, _("/usr/bin/gnome-terminal")) );
    m_shellProgram->SetHelpString(_("Path to command shell"));
    
    m_dataDirectory = m_properties->Append(  new wxDirProperty( _("Data Directory"), wxPG_LABEL, _("/usr/local/OpcServant/data")) );
    m_dataDirectory->SetHelpString(wxT(""));
    
    m_enableP2Pserial = m_properties->Append(  new wxBoolProperty( _("Enable P2P Serial"), wxPG_LABEL, 0) );
    m_enableP2Pserial->SetHelpString(wxT(""));
    
    m_enableMODBUSTCP = m_properties->Append(  new wxBoolProperty( _("Enable MODBUS TCP"), wxPG_LABEL, 0) );
    m_enableMODBUSTCP->SetHelpString(wxT(""));
    
    m_pgProp87 = m_properties->Append(  new wxPropertyCategory( _("OPC") ) );
    m_pgProp87->SetHelpString(wxT(""));
    
    m_opcPort = m_properties->Append(  new wxStringProperty( _("OPC Port"), wxPG_LABEL, _("4840")) );
    m_opcPort->SetHelpString(wxT(""));
    
    m_opcNamespace = m_properties->Append(  new wxStringProperty( _("OPC Namespace"), wxPG_LABEL, _("urn:bourbon")) );
    m_opcNamespace->SetHelpString(wxT(""));
    
    m_loginRequired = m_properties->Append(  new wxBoolProperty( _("Login Required"), wxPG_LABEL, 1) );
    m_loginRequired->SetHelpString(wxT(""));
    m_loginRequired->SetEditor( wxT("CheckBox") );
    
    m_opcUsername = m_properties->Append(  new wxStringProperty( _("OPC Username"), wxPG_LABEL, _("user")) );
    m_opcUsername->SetHelpString(wxT(""));
    
    m_opcPassword = m_properties->Append(  new wxStringProperty( _("OPC Password"), wxPG_LABEL, _("password")) );
    m_opcPassword->SetHelpString(wxT(""));
    
    gridSizer161 = new wxGridSizer(0, 4, 0, 0);
    
    boxSizer55->Add(gridSizer161, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button163 = new wxButton(this, wxID_ANY, _("Factory Reset"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer161->Add(m_button163, 0, wxALL, WXC_FROM_DIP(5));
    
    m_buttonUsers = new wxButton(this, wxID_ANY, _("Users ..."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer161->Add(m_buttonUsers, 0, wxALL, WXC_FROM_DIP(5));
    
    m_stdBtnSizer57 = new wxStdDialogButtonSizer();
    
    boxSizer55->Add(m_stdBtnSizer57, 0, wxALL, WXC_FROM_DIP(5));
    
    m_button59 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_button59->SetDefault();
    m_stdBtnSizer57->AddButton(m_button59);
    
    m_button61 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer57->AddButton(m_button61);
    m_stdBtnSizer57->Realize();
    
    SetName(wxT("SystemPropertiesDialogBase"));
    SetMinClientSize(wxSize(500,400));
    SetSize(wxDLG_UNIT(this, wxSize(500,450)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_button163->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SystemPropertiesDialogBase::onFactoryReset), NULL, this);
    m_buttonUsers->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SystemPropertiesDialogBase::onUsers), NULL, this);
    m_button59->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SystemPropertiesDialogBase::OnOK), NULL, this);
    
}

SystemPropertiesDialogBase::~SystemPropertiesDialogBase()
{
    m_button163->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SystemPropertiesDialogBase::onFactoryReset), NULL, this);
    m_buttonUsers->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SystemPropertiesDialogBase::onUsers), NULL, this);
    m_button59->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SystemPropertiesDialogBase::OnOK), NULL, this);
    
}

ReportGeneratorPanelBase::ReportGeneratorPanelBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterCommonInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer185 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer185);
    
    m_notebook = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxBK_DEFAULT);
    m_notebook->SetName(wxT("m_notebook"));
    
    boxSizer185->Add(m_notebook, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_panelSetup = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(640,480)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelSetup, _("Setup"), false);
    
    boxSizer197 = new wxBoxSizer(wxVERTICAL);
    m_panelSetup->SetSizer(boxSizer197);
    
    boxSizer215 = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizer197->Add(boxSizer215, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_listDataPointsArr;
    m_listDataPoints = new wxListBox(m_panelSetup, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelSetup, wxSize(-1,-1)), m_listDataPointsArr, wxLB_SINGLE);
    
    boxSizer215->Add(m_listDataPoints, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer199 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer199->SetFlexibleDirection( wxBOTH );
    flexGridSizer199->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer199->AddGrowableCol(1);
    flexGridSizer199->AddGrowableRow(0);
    flexGridSizer199->AddGrowableRow(1);
    flexGridSizer199->AddGrowableRow(2);
    flexGridSizer199->AddGrowableRow(3);
    flexGridSizer199->AddGrowableRow(4);
    
    boxSizer215->Add(flexGridSizer199, 3, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText271 = new wxStaticText(m_panelSetup, wxID_ANY, _("Type"), wxDefaultPosition, wxDLG_UNIT(m_panelSetup, wxSize(-1,-1)), 0);
    
    flexGridSizer199->Add(m_staticText271, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_choiceTimeFrameArr;
    m_choiceTimeFrameArr.Add(wxT("Last Hour"));
    m_choiceTimeFrameArr.Add(wxT("Last Day"));
    m_choiceTimeFrameArr.Add(wxT("Last Week"));
    m_choiceTimeFrameArr.Add(wxT("Exact"));
    m_choiceTimeFrame = new wxChoice(m_panelSetup, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelSetup, wxSize(-1,-1)), m_choiceTimeFrameArr, 0);
    m_choiceTimeFrame->SetSelection(0);
    
    flexGridSizer199->Add(m_choiceTimeFrame, 0, wxALL, WXC_FROM_DIP(5));
    m_choiceTimeFrame->SetMinSize(wxSize(200,-1));
    
    m_staticText223 = new wxStaticText(m_panelSetup, wxID_ANY, _("Start Time"), wxDefaultPosition, wxDLG_UNIT(m_panelSetup, wxSize(-1,-1)), 0);
    
    flexGridSizer199->Add(m_staticText223, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_timeStart = new wxTimePickerCtrl(m_panelSetup, wxID_ANY, wxDefaultDateTime, wxDefaultPosition, wxDLG_UNIT(m_panelSetup, wxSize(-1,-1)), wxTP_DEFAULT);
    m_timeStart->Enable(false);
    
    flexGridSizer199->Add(m_timeStart, 1, wxALL, WXC_FROM_DIP(5));
    m_timeStart->SetMinSize(wxSize(200,-1));
    
    m_staticText275 = new wxStaticText(m_panelSetup, wxID_ANY, _("Start Date"), wxDefaultPosition, wxDLG_UNIT(m_panelSetup, wxSize(-1,-1)), 0);
    
    flexGridSizer199->Add(m_staticText275, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_dateStart = new wxDatePickerCtrl(m_panelSetup, wxID_ANY, wxDefaultDateTime, wxDefaultPosition, wxDLG_UNIT(m_panelSetup, wxSize(-1,-1)), wxDP_DEFAULT);
    m_dateStart->Enable(false);
    
    flexGridSizer199->Add(m_dateStart, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText227 = new wxStaticText(m_panelSetup, wxID_ANY, _("End Time"), wxDefaultPosition, wxDLG_UNIT(m_panelSetup, wxSize(-1,-1)), 0);
    
    flexGridSizer199->Add(m_staticText227, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_timeEnd = new wxTimePickerCtrl(m_panelSetup, wxID_ANY, wxDefaultDateTime, wxDefaultPosition, wxDLG_UNIT(m_panelSetup, wxSize(-1,-1)), wxTP_DEFAULT);
    m_timeEnd->Enable(false);
    
    flexGridSizer199->Add(m_timeEnd, 1, wxALL, WXC_FROM_DIP(5));
    m_timeEnd->SetMinSize(wxSize(200,-1));
    
    m_staticText279 = new wxStaticText(m_panelSetup, wxID_ANY, _("End Date"), wxDefaultPosition, wxDLG_UNIT(m_panelSetup, wxSize(-1,-1)), 0);
    
    flexGridSizer199->Add(m_staticText279, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_dateEnd = new wxDatePickerCtrl(m_panelSetup, wxID_ANY, wxDefaultDateTime, wxDefaultPosition, wxDLG_UNIT(m_panelSetup, wxSize(-1,-1)), wxDP_DEFAULT);
    m_dateEnd->Enable(false);
    
    flexGridSizer199->Add(m_dateEnd, 0, wxALL, WXC_FROM_DIP(5));
    
    gridSizer207 = new wxGridSizer(0, 7, 0, 0);
    
    boxSizer197->Add(gridSizer207, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_buttonLoad = new wxButton(m_panelSetup, wxID_ANY, _("Load"), wxDefaultPosition, wxDLG_UNIT(m_panelSetup, wxSize(-1,-1)), 0);
    
    gridSizer207->Add(m_buttonLoad, 0, wxALL, WXC_FROM_DIP(5));
    
    m_buttonSave = new wxButton(m_panelSetup, wxID_ANY, _("Save ..."), wxDefaultPosition, wxDLG_UNIT(m_panelSetup, wxSize(-1,-1)), 0);
    
    gridSizer207->Add(m_buttonSave, 0, wxALL, WXC_FROM_DIP(5));
    
    m_buttonRemove = new wxButton(m_panelSetup, wxID_ANY, _("Remove"), wxDefaultPosition, wxDLG_UNIT(m_panelSetup, wxSize(-1,-1)), 0);
    
    gridSizer207->Add(m_buttonRemove, 0, wxALL, WXC_FROM_DIP(5));
    
    m_buttonMake = new wxButton(m_panelSetup, wxID_ANY, _("Make ..."), wxDefaultPosition, wxDLG_UNIT(m_panelSetup, wxSize(-1,-1)), 0);
    
    gridSizer207->Add(m_buttonMake, 0, wxALL, WXC_FROM_DIP(5));
    
    m_buttonNew = new wxButton(m_panelSetup, wxID_ANY, _("New ..."), wxDefaultPosition, wxDLG_UNIT(m_panelSetup, wxSize(-1,-1)), 0);
    
    gridSizer207->Add(m_buttonNew, 0, wxALL, WXC_FROM_DIP(5));
    
    m_buttonPrint = new wxButton(m_panelSetup, wxID_ANY, _("Print ..."), wxDefaultPosition, wxDLG_UNIT(m_panelSetup, wxSize(-1,-1)), 0);
    
    gridSizer207->Add(m_buttonPrint, 0, wxALL, WXC_FROM_DIP(5));
    
    m_buttonExport = new wxButton(m_panelSetup, wxID_ANY, _("Export ..."), wxDefaultPosition, wxDLG_UNIT(m_panelSetup, wxSize(-1,-1)), 0);
    
    gridSizer207->Add(m_buttonExport, 0, wxALL, WXC_FROM_DIP(5));
    
    m_panelTable = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelTable, _("Table"), false);
    
    boxSizer233 = new wxBoxSizer(wxVERTICAL);
    m_panelTable->SetSizer(boxSizer233);
    
    m_reportTables = new wxNotebook(m_panelTable, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelTable, wxSize(-1,-1)), wxBK_BOTTOM);
    m_reportTables->SetName(wxT("m_reportTables"));
    
    boxSizer233->Add(m_reportTables, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_panelGraph = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelGraph, _("Graph"), false);
    
    boxSizerGraph = new wxBoxSizer(wxVERTICAL);
    m_panelGraph->SetSizer(boxSizerGraph);
    
    m_graphBitmap = new wxStaticBitmap(m_panelGraph, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDLG_UNIT(m_panelGraph, wxSize(400,400)), 0 );
    
    boxSizerGraph->Add(m_graphBitmap, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    m_graphBitmap->SetMinSize(wxSize(200,200));
    
    m_panelStatistics = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelStatistics, _("Statistics"), false);
    
    boxSizer251 = new wxBoxSizer(wxVERTICAL);
    m_panelStatistics->SetSizer(boxSizer251);
    
    m_statsTable = new wxDataViewListCtrl(m_panelStatistics, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelStatistics, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE);
    
    boxSizer251->Add(m_statsTable, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_statsTable->AppendTextColumn(_("Item"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT, wxDATAVIEW_COL_RESIZABLE);
    m_statsTable->AppendTextColumn(_("Mean"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT, wxDATAVIEW_COL_RESIZABLE);
    m_statsTable->AppendTextColumn(_("Min"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT, wxDATAVIEW_COL_RESIZABLE);
    m_statsTable->AppendTextColumn(_("Max"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT, wxDATAVIEW_COL_RESIZABLE);
    m_statsTable->AppendTextColumn(_("Std. Dev."), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT, wxDATAVIEW_COL_RESIZABLE);
    m_statsTable->AppendTextColumn(_("Samples"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT, wxDATAVIEW_COL_RESIZABLE);
    m_panelDataPoints = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelDataPoints, _("Values / Alias"), false);
    
    boxSizer265 = new wxBoxSizer(wxVERTICAL);
    m_panelDataPoints->SetSizer(boxSizer265);
    
    boxSizer267 = new wxBoxSizer(wxVERTICAL);
    
    boxSizer265->Add(boxSizer267, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText487 = new wxStaticText(m_panelDataPoints, wxID_ANY, _("Values"), wxDefaultPosition, wxDLG_UNIT(m_panelDataPoints, wxSize(-1,-1)), 0);
    
    boxSizer267->Add(m_staticText487, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_valueListArr;
    m_valueList = new wxCheckListBox(m_panelDataPoints, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelDataPoints, wxSize(-1,-1)), m_valueListArr, wxLB_SINGLE);
    
    boxSizer267->Add(m_valueList, 4, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText489 = new wxStaticText(m_panelDataPoints, wxID_ANY, _("Alias"), wxDefaultPosition, wxDLG_UNIT(m_panelDataPoints, wxSize(-1,-1)), 0);
    
    boxSizer267->Add(m_staticText489, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_AliasListArr;
    m_AliasList = new wxCheckListBox(m_panelDataPoints, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelDataPoints, wxSize(-1,-1)), m_AliasListArr, wxLB_SINGLE);
    
    boxSizer267->Add(m_AliasList, 4, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_buttonRefreshValues = new wxButton(m_panelDataPoints, wxID_ANY, _("Refresh"), wxDefaultPosition, wxDLG_UNIT(m_panelDataPoints, wxSize(-1,-1)), 0);
    
    boxSizer265->Add(m_buttonRefreshValues, 0, wxALL, WXC_FROM_DIP(5));
    
    SetName(wxT("ReportGeneratorPanelBase"));
    SetSize(wxDLG_UNIT(this, wxSize(700,500)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    m_choiceTimeFrame->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(ReportGeneratorPanelBase::OnTimeframeChoice), NULL, this);
    m_buttonLoad->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReportGeneratorPanelBase::onLoadReport), NULL, this);
    m_buttonSave->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReportGeneratorPanelBase::onSaveReport), NULL, this);
    m_buttonRemove->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReportGeneratorPanelBase::onRemoveReport), NULL, this);
    m_buttonMake->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReportGeneratorPanelBase::onMakeReport), NULL, this);
    m_buttonNew->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReportGeneratorPanelBase::OnNew), NULL, this);
    m_buttonPrint->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReportGeneratorPanelBase::onPrint), NULL, this);
    m_buttonExport->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReportGeneratorPanelBase::onExport), NULL, this);
    m_buttonRefreshValues->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReportGeneratorPanelBase::onRefreshValues), NULL, this);
    
}

ReportGeneratorPanelBase::~ReportGeneratorPanelBase()
{
    m_choiceTimeFrame->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(ReportGeneratorPanelBase::OnTimeframeChoice), NULL, this);
    m_buttonLoad->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReportGeneratorPanelBase::onLoadReport), NULL, this);
    m_buttonSave->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReportGeneratorPanelBase::onSaveReport), NULL, this);
    m_buttonRemove->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReportGeneratorPanelBase::onRemoveReport), NULL, this);
    m_buttonMake->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReportGeneratorPanelBase::onMakeReport), NULL, this);
    m_buttonNew->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReportGeneratorPanelBase::OnNew), NULL, this);
    m_buttonPrint->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReportGeneratorPanelBase::onPrint), NULL, this);
    m_buttonExport->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReportGeneratorPanelBase::onExport), NULL, this);
    m_buttonRefreshValues->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReportGeneratorPanelBase::onRefreshValues), NULL, this);
    
}

ReportTablePageBase::ReportTablePageBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterCommonInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer341 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer341);
    
    m_itemName = new wxStaticText(this, wxID_ANY, _("Item Name"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer341->Add(m_itemName, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    boxSizer349 = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizer341->Add(boxSizer349, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_Table = new wxDataViewListCtrl(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE);
    
    boxSizer349->Add(m_Table, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_Table->AppendTextColumn(_("Time-Date"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT, wxDATAVIEW_COL_RESIZABLE);
    m_Table->AppendTextColumn(_("State"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT, wxDATAVIEW_COL_RESIZABLE);
    m_Table->AppendTextColumn(_("Value"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT, wxDATAVIEW_COL_RESIZABLE);
    m_tableScrollBar = new wxScrollBar(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxSB_VERTICAL);
    m_tableScrollBar->SetScrollbar(0, 1, 10, 1);
    
    boxSizer349->Add(m_tableScrollBar, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    SetName(wxT("ReportTablePageBase"));
    SetSize(wxDLG_UNIT(this, wxSize(700,500)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    m_Table->Connect(wxEVT_SIZE, wxSizeEventHandler(ReportTablePageBase::onSize), NULL, this);
    m_tableScrollBar->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(ReportTablePageBase::onScrollChanged), NULL, this);
    
}

ReportTablePageBase::~ReportTablePageBase()
{
    m_Table->Disconnect(wxEVT_SIZE, wxSizeEventHandler(ReportTablePageBase::onSize), NULL, this);
    m_tableScrollBar->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(ReportTablePageBase::onScrollChanged), NULL, this);
    
}

ReportPrintOptionsBase::ReportPrintOptionsBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterCommonInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer357 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer357);
    
    m_printTable = new wxCheckBox(this, wxID_ANY, _("Print Table"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_printTable->SetValue(false);
    
    boxSizer357->Add(m_printTable, 0, wxALL, WXC_FROM_DIP(5));
    
    m_printGraph = new wxCheckBox(this, wxID_ANY, _("Print Graph"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_printGraph->SetValue(false);
    
    boxSizer357->Add(m_printGraph, 0, wxALL, WXC_FROM_DIP(5));
    
    m_printStats = new wxCheckBox(this, wxID_ANY, _("Print Statistics"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_printStats->SetValue(false);
    
    boxSizer357->Add(m_printStats, 0, wxALL, WXC_FROM_DIP(5));
    
    boxSizer357->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));
    
    m_stdBtnSizer359 = new wxStdDialogButtonSizer();
    
    boxSizer357->Add(m_stdBtnSizer359, 0, wxALL, WXC_FROM_DIP(5));
    
    m_button373 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer359->AddButton(m_button373);
    
    m_button371 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer359->AddButton(m_button371);
    m_stdBtnSizer359->Realize();
    
    SetName(wxT("ReportPrintOptionsBase"));
    SetSize(wxDLG_UNIT(this, wxSize(500,300)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_button371->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReportPrintOptionsBase::onOk), NULL, this);
    
}

ReportPrintOptionsBase::~ReportPrintOptionsBase()
{
    m_button371->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReportPrintOptionsBase::onOk), NULL, this);
    
}

AliasConfigurationDialogBase::AliasConfigurationDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterCommonInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer407 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer407);
    
    boxSizer471 = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizer407->Add(boxSizer471, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_aliasList = new wxDataViewListCtrl(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE);
    
    boxSizer471->Add(m_aliasList, 3, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_aliasList->AppendTextColumn(_("Alias"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT, wxDATAVIEW_COL_RESIZABLE);
    m_aliasList->AppendTextColumn(_("Value Path"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT, wxDATAVIEW_COL_RESIZABLE);
    boxSizer477 = new wxBoxSizer(wxVERTICAL);
    
    boxSizer471->Add(boxSizer477, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button479 = new wxButton(this, wxID_ANY, _("Add ..."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer477->Add(m_button479, 0, wxALL, WXC_FROM_DIP(5));
    
    m_button481 = new wxButton(this, wxID_ANY, _("Edit ..."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer477->Add(m_button481, 0, wxALL, WXC_FROM_DIP(5));
    
    m_button483 = new wxButton(this, wxID_ANY, _("Delete ..."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer477->Add(m_button483, 0, wxALL, WXC_FROM_DIP(5));
    
    m_stdBtnSizer413 = new wxStdDialogButtonSizer();
    
    boxSizer407->Add(m_stdBtnSizer413, 0, wxALL, WXC_FROM_DIP(5));
    
    m_button415 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer413->AddButton(m_button415);
    
    m_button417 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer413->AddButton(m_button417);
    m_stdBtnSizer413->Realize();
    
    SetName(wxT("AliasConfigurationDialogBase"));
    SetMinClientSize(wxSize(600,400));
    SetSize(wxDLG_UNIT(this, wxSize(800,600)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_button479->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(AliasConfigurationDialogBase::onAdd), NULL, this);
    m_button481->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(AliasConfigurationDialogBase::onEdit), NULL, this);
    m_button483->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(AliasConfigurationDialogBase::onDelete), NULL, this);
    m_button417->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(AliasConfigurationDialogBase::onOK), NULL, this);
    
}

AliasConfigurationDialogBase::~AliasConfigurationDialogBase()
{
    m_button479->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(AliasConfigurationDialogBase::onAdd), NULL, this);
    m_button481->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(AliasConfigurationDialogBase::onEdit), NULL, this);
    m_button483->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(AliasConfigurationDialogBase::onDelete), NULL, this);
    m_button417->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(AliasConfigurationDialogBase::onOK), NULL, this);
    
}

SelectValueDialogBase::SelectValueDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterCommonInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer433 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer433);
    
    wxArrayString m_listAliasArr;
    m_listAlias = new wxListBox(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(800,600)), m_listAliasArr, wxLB_SORT|wxLB_SINGLE);
    
    boxSizer433->Add(m_listAlias, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    m_listAlias->SetMinSize(wxSize(600,400));
    
    m_stdBtnSizer437 = new wxStdDialogButtonSizer();
    
    boxSizer433->Add(m_stdBtnSizer437, 0, wxALL, WXC_FROM_DIP(5));
    
    m_button439 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer437->AddButton(m_button439);
    
    m_button441 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_button441->SetDefault();
    m_stdBtnSizer437->AddButton(m_button441);
    m_stdBtnSizer437->Realize();
    
    SetName(wxT("SelectValueDialogBase"));
    SetSize(wxDLG_UNIT(this, wxSize(800,600)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_listAlias->Connect(wxEVT_COMMAND_LISTBOX_SELECTED, wxCommandEventHandler(SelectValueDialogBase::onSelect), NULL, this);
    m_button441->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SelectValueDialogBase::onOK), NULL, this);
    
}

SelectValueDialogBase::~SelectValueDialogBase()
{
    m_listAlias->Disconnect(wxEVT_COMMAND_LISTBOX_SELECTED, wxCommandEventHandler(SelectValueDialogBase::onSelect), NULL, this);
    m_button441->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SelectValueDialogBase::onOK), NULL, this);
    
}

AddAliasDialogBase::AddAliasDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterCommonInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer449 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer449);
    
    flexGridSizer451 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer451->SetFlexibleDirection( wxBOTH );
    flexGridSizer451->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer451->AddGrowableCol(1);
    
    boxSizer449->Add(flexGridSizer451, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText459 = new wxStaticText(this, wxID_ANY, _("Alias"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer451->Add(m_staticText459, 0, wxALL, WXC_FROM_DIP(5));
    
    m_alias = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_alias->SetHint(wxT(""));
    #endif
    
    flexGridSizer451->Add(m_alias, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText463 = new wxStaticText(this, wxID_ANY, _("Value"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer451->Add(m_staticText463, 0, wxALL, WXC_FROM_DIP(5));
    
    m_valueString = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_valueString->SetHint(wxT(""));
    #endif
    
    flexGridSizer451->Add(m_valueString, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button467 = new wxButton(this, wxID_ANY, _("Select ..."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer451->Add(m_button467, 0, wxALL, WXC_FROM_DIP(5));
    
    m_stdBtnSizer453 = new wxStdDialogButtonSizer();
    
    boxSizer449->Add(m_stdBtnSizer453, 0, wxALL, WXC_FROM_DIP(5));
    
    m_button455 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer453->AddButton(m_button455);
    
    m_button457 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_button457->SetDefault();
    m_stdBtnSizer453->AddButton(m_button457);
    m_stdBtnSizer453->Realize();
    
    SetName(wxT("AddAliasDialogBase"));
    SetMinClientSize(wxSize(500,300));
    SetSize(wxDLG_UNIT(this, wxSize(500,300)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_button467->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(AddAliasDialogBase::onSelect), NULL, this);
    m_button457->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(AddAliasDialogBase::onOK), NULL, this);
    
}

AddAliasDialogBase::~AddAliasDialogBase()
{
    m_button467->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(AddAliasDialogBase::onSelect), NULL, this);
    m_button457->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(AddAliasDialogBase::onOK), NULL, this);
    
}

UserConfigurationDialogBase::UserConfigurationDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterCommonInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer515 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer515);
    
    m_panel517 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    boxSizer515->Add(m_panel517, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    boxSizer525 = new wxBoxSizer(wxHORIZONTAL);
    m_panel517->SetSizer(boxSizer525);
    
    wxArrayString m_listUsersArr;
    m_listUsers = new wxListBox(m_panel517, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel517, wxSize(-1,-1)), m_listUsersArr, wxLB_SINGLE);
    
    boxSizer525->Add(m_listUsers, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_panel529 = new wxPanel(m_panel517, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel517, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    boxSizer525->Add(m_panel529, 3, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    boxSizer533 = new wxBoxSizer(wxVERTICAL);
    m_panel529->SetSizer(boxSizer533);
    
    flexGridSizer535 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer535->SetFlexibleDirection( wxBOTH );
    flexGridSizer535->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    boxSizer533->Add(flexGridSizer535, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText545 = new wxStaticText(m_panel529, wxID_ANY, _("Password"), wxDefaultPosition, wxDLG_UNIT(m_panel529, wxSize(-1,-1)), 0);
    
    flexGridSizer535->Add(m_staticText545, 0, wxALL, WXC_FROM_DIP(5));
    
    m_password = new wxTextCtrl(m_panel529, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel529, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_password->SetHint(wxT(""));
    #endif
    
    flexGridSizer535->Add(m_password, 0, wxALL, WXC_FROM_DIP(5));
    
    m_Enabled = new wxCheckBox(m_panel529, wxID_ANY, _("Enabled"), wxDefaultPosition, wxDLG_UNIT(m_panel529, wxSize(-1,-1)), 0);
    m_Enabled->SetValue(false);
    
    flexGridSizer535->Add(m_Enabled, 0, wxALL, WXC_FROM_DIP(5));
    
    m_Admin = new wxCheckBox(m_panel529, wxID_ANY, _("Admin"), wxDefaultPosition, wxDLG_UNIT(m_panel529, wxSize(-1,-1)), 0);
    m_Admin->SetValue(false);
    
    flexGridSizer535->Add(m_Admin, 0, wxALL, WXC_FROM_DIP(5));
    
    gridSizer537 = new wxGridSizer(0, 3, 0, 0);
    
    boxSizer533->Add(gridSizer537, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_buttonNew = new wxButton(m_panel529, wxID_ANY, _("New ..."), wxDefaultPosition, wxDLG_UNIT(m_panel529, wxSize(-1,-1)), 0);
    
    gridSizer537->Add(m_buttonNew, 0, wxALL, WXC_FROM_DIP(5));
    
    m_buttonApply = new wxButton(m_panel529, wxID_ANY, _("Apply"), wxDefaultPosition, wxDLG_UNIT(m_panel529, wxSize(-1,-1)), 0);
    
    gridSizer537->Add(m_buttonApply, 0, wxALL, WXC_FROM_DIP(5));
    
    m_buttonDelete = new wxButton(m_panel529, wxID_ANY, _("Delete"), wxDefaultPosition, wxDLG_UNIT(m_panel529, wxSize(-1,-1)), 0);
    
    gridSizer537->Add(m_buttonDelete, 0, wxALL, WXC_FROM_DIP(5));
    
    m_stdBtnSizer519 = new wxStdDialogButtonSizer();
    
    boxSizer515->Add(m_stdBtnSizer519, 0, wxALL, WXC_FROM_DIP(5));
    
    m_button521 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer519->AddButton(m_button521);
    
    m_button523 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer519->AddButton(m_button523);
    m_stdBtnSizer519->Realize();
    
    SetName(wxT("UserConfigurationDialogBase"));
    SetSize(wxDLG_UNIT(this, wxSize(800,500)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_listUsers->Connect(wxEVT_COMMAND_LISTBOX_SELECTED, wxCommandEventHandler(UserConfigurationDialogBase::onSelection), NULL, this);
    m_buttonNew->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(UserConfigurationDialogBase::onNew), NULL, this);
    m_buttonApply->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(UserConfigurationDialogBase::onApply), NULL, this);
    m_buttonDelete->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(UserConfigurationDialogBase::onDelete), NULL, this);
    m_button523->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(UserConfigurationDialogBase::onOk), NULL, this);
    
}

UserConfigurationDialogBase::~UserConfigurationDialogBase()
{
    m_listUsers->Disconnect(wxEVT_COMMAND_LISTBOX_SELECTED, wxCommandEventHandler(UserConfigurationDialogBase::onSelection), NULL, this);
    m_buttonNew->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(UserConfigurationDialogBase::onNew), NULL, this);
    m_buttonApply->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(UserConfigurationDialogBase::onApply), NULL, this);
    m_buttonDelete->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(UserConfigurationDialogBase::onDelete), NULL, this);
    m_button523->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(UserConfigurationDialogBase::onOk), NULL, this);
    
}

PinEntryDialogBase::PinEntryDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterCommonInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer561 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer561);
    
    m_text = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_text->SetHint(wxT(""));
    #endif
    
    boxSizer561->Add(m_text, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    gridSizer563 = new wxGridSizer(0, 3, 0, 0);
    
    boxSizer561->Add(gridSizer563, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button567 = new wxButton(this, wxID_ANY, _("1"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer563->Add(m_button567, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button569 = new wxButton(this, wxID_ANY, _("2"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer563->Add(m_button569, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button571 = new wxButton(this, wxID_ANY, _("3"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer563->Add(m_button571, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button573 = new wxButton(this, wxID_ANY, _("4"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer563->Add(m_button573, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button575 = new wxButton(this, wxID_ANY, _("5"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer563->Add(m_button575, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button577 = new wxButton(this, wxID_ANY, _("6"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer563->Add(m_button577, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button579 = new wxButton(this, wxID_ANY, _("7"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer563->Add(m_button579, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button581 = new wxButton(this, wxID_ANY, _("8"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer563->Add(m_button581, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button583 = new wxButton(this, wxID_ANY, _("9"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer563->Add(m_button583, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button585 = new wxButton(this, wxID_ANY, _("DEL"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer563->Add(m_button585, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button587 = new wxButton(this, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer563->Add(m_button587, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button589 = new wxButton(this, wxID_ANY, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer563->Add(m_button589, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    SetName(wxT("PinEntryDialogBase"));
    SetSize(wxDLG_UNIT(this, wxSize(500,500)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_button567->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PinEntryDialogBase::on1), NULL, this);
    m_button569->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PinEntryDialogBase::on2), NULL, this);
    m_button571->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PinEntryDialogBase::on3), NULL, this);
    m_button573->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PinEntryDialogBase::on4), NULL, this);
    m_button575->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PinEntryDialogBase::on5), NULL, this);
    m_button577->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PinEntryDialogBase::on6), NULL, this);
    m_button579->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PinEntryDialogBase::on7), NULL, this);
    m_button581->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PinEntryDialogBase::on8), NULL, this);
    m_button583->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PinEntryDialogBase::on9), NULL, this);
    m_button585->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PinEntryDialogBase::onDP), NULL, this);
    m_button587->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PinEntryDialogBase::on0), NULL, this);
    m_button589->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PinEntryDialogBase::onOk), NULL, this);
    
}

PinEntryDialogBase::~PinEntryDialogBase()
{
    m_button567->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PinEntryDialogBase::on1), NULL, this);
    m_button569->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PinEntryDialogBase::on2), NULL, this);
    m_button571->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PinEntryDialogBase::on3), NULL, this);
    m_button573->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PinEntryDialogBase::on4), NULL, this);
    m_button575->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PinEntryDialogBase::on5), NULL, this);
    m_button577->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PinEntryDialogBase::on6), NULL, this);
    m_button579->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PinEntryDialogBase::on7), NULL, this);
    m_button581->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PinEntryDialogBase::on8), NULL, this);
    m_button583->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PinEntryDialogBase::on9), NULL, this);
    m_button585->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PinEntryDialogBase::onDP), NULL, this);
    m_button587->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PinEntryDialogBase::on0), NULL, this);
    m_button589->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PinEntryDialogBase::onOk), NULL, this);
    
}

SecondReportPanelBase::SecondReportPanelBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterCommonInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer603 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer603);
    
    m_notebook605 = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxBK_DEFAULT);
    m_notebook605->SetName(wxT("m_notebook605"));
    
    boxSizer603->Add(m_notebook605, 0, wxALL, WXC_FROM_DIP(5));
    
    SetName(wxT("SecondReportPanelBase"));
    SetSize(wxDLG_UNIT(this, wxSize(500,300)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
}

SecondReportPanelBase::~SecondReportPanelBase()
{
}
