//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: NodeFlowUI.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "NodeFlowUI.h"


// Declare the bitmap loading function
extern void wxCrafterCOw9lwInitBitmapResources();

static bool bBitmapLoaded = false;


NodeFlowConfigurationBase::NodeFlowConfigurationBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterCOw9lwInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer3 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer3);
    
    flexGridSizer23 = new wxFlexGridSizer(0, 3, 0, 0);
    flexGridSizer23->SetFlexibleDirection( wxBOTH );
    flexGridSizer23->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer23->AddGrowableCol(1);
    
    boxSizer3->Add(flexGridSizer23, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_Flow = new wxStaticText(this, wxID_ANY, _("Flow"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer23->Add(m_Flow, 0, wxALL, WXC_FROM_DIP(5));
    
    m_flowList = new wxFilePickerCtrl(this, wxID_ANY, wxEmptyString, _("Select a Flow"), wxT("*.nfs"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxFLP_DEFAULT_STYLE|wxFLP_USE_TEXTCTRL);
    
    flexGridSizer23->Add(m_flowList, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_editFlow = new wxButton(this, wxID_ANY, _("Edit ..."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer23->Add(m_editFlow, 0, wxALL, WXC_FROM_DIP(5));
    
    m_enabled = new wxCheckBox(this, wxID_ANY, _("Enabled"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_enabled->SetValue(false);
    
    flexGridSizer23->Add(m_enabled, 0, wxALL, WXC_FROM_DIP(5));
    
    m_stdBtnSizer11 = new wxStdDialogButtonSizer();
    
    boxSizer3->Add(m_stdBtnSizer11, 0, wxALL, WXC_FROM_DIP(5));
    
    m_button13 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer11->AddButton(m_button13);
    
    m_button15 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer11->AddButton(m_button15);
    m_stdBtnSizer11->Realize();
    
    SetName(wxT("NodeFlowConfigurationBase"));
    SetMinClientSize(wxSize(500,200));
    SetSize(wxDLG_UNIT(this, wxSize(500,200)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_editFlow->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(NodeFlowConfigurationBase::onEdit), NULL, this);
    m_button15->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(NodeFlowConfigurationBase::onOK), NULL, this);
    
}

NodeFlowConfigurationBase::~NodeFlowConfigurationBase()
{
    m_editFlow->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(NodeFlowConfigurationBase::onEdit), NULL, this);
    m_button15->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(NodeFlowConfigurationBase::onOK), NULL, this);
    
}

FlowEditorDialogBase::FlowEditorDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterCOw9lwInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer45 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer45);
    
    m_editorPanel = new NodeEditorPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    boxSizer45->Add(m_editorPanel, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_stdBtnSizer49 = new wxStdDialogButtonSizer();
    
    boxSizer45->Add(m_stdBtnSizer49, 0, wxALL, WXC_FROM_DIP(5));
    
    m_button51 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer49->AddButton(m_button51);
    
    m_button53 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer49->AddButton(m_button53);
    m_stdBtnSizer49->Realize();
    
    SetName(wxT("FlowEditorDialogBase"));
    SetMinClientSize(wxSize(800,600));
    SetSize(wxDLG_UNIT(this, wxSize(800,600)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_button53->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(FlowEditorDialogBase::onOk), NULL, this);
    
}

FlowEditorDialogBase::~FlowEditorDialogBase()
{
    m_button53->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(FlowEditorDialogBase::onOk), NULL, this);
    
}
