//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: OpcClientUI.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "OpcClientUI.h"


// Declare the bitmap loading function
extern void wxCrafter7Fz5K6InitBitmapResources();

static bool bBitmapLoaded = false;


OpcClientConfigurationDialogBase::OpcClientConfigurationDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafter7Fz5K6InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer3 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer3);
    
    flexGridSizer24 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer24->SetFlexibleDirection( wxBOTH );
    flexGridSizer24->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer24->AddGrowableCol(1);
    
    boxSizer3->Add(flexGridSizer24, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText13 = new wxStaticText(this, wxID_ANY, _("Host"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer24->Add(m_staticText13, 0, wxALL, WXC_FROM_DIP(5));
    
    m_serverHost = new wxTextCtrl(this, wxID_ANY, wxT("opc.tcp://localhost:4840"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_serverHost->SetHint(_("opc.tcp://localhost:4840"));
    #endif
    
    flexGridSizer24->Add(m_serverHost, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText17 = new wxStaticText(this, wxID_ANY, _("Username"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer24->Add(m_staticText17, 0, wxALL, WXC_FROM_DIP(5));
    
    m_username = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_username->SetHint(wxT(""));
    #endif
    
    flexGridSizer24->Add(m_username, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText21 = new wxStaticText(this, wxID_ANY, _("Password"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer24->Add(m_staticText21, 0, wxALL, WXC_FROM_DIP(5));
    
    m_password = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_password->SetHint(wxT(""));
    #endif
    
    flexGridSizer24->Add(m_password, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_useSecurity = new wxCheckBox(this, wxID_ANY, _("Use Security"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_useSecurity->SetValue(false);
    
    flexGridSizer24->Add(m_useSecurity, 0, wxALL, WXC_FROM_DIP(5));
    
    m_enabled = new wxCheckBox(this, wxID_ANY, _("Enabled"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_enabled->SetValue(false);
    
    flexGridSizer24->Add(m_enabled, 0, wxALL, WXC_FROM_DIP(5));
    
    boxSizer44 = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizer3->Add(boxSizer44, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button46 = new wxButton(this, wxID_ANY, _("Add"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer44->Add(m_button46, 0, wxALL, WXC_FROM_DIP(5));
    
    m_button48 = new wxButton(this, wxID_ANY, _("Remove"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer44->Add(m_button48, 0, wxALL, WXC_FROM_DIP(5));
    
    m_valueId = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_valueId->SetHint(wxT(""));
    #endif
    
    boxSizer44->Add(m_valueId, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_browseItem = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_browseItem->SetHint(wxT(""));
    #endif
    
    boxSizer44->Add(m_browseItem, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button52 = new wxButton(this, wxID_ANY, _("Browse .."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer44->Add(m_button52, 0, wxALL, WXC_FROM_DIP(5));
    
    m_listCtl = new wxDataViewListCtrl(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE);
    
    boxSizer3->Add(m_listCtl, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_listCtl->AppendTextColumn(_("Value ID"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT, wxDATAVIEW_COL_RESIZABLE);
    m_listCtl->AppendTextColumn(_("Path"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT, wxDATAVIEW_COL_RESIZABLE);
    m_stdBtnSizer5 = new wxStdDialogButtonSizer();
    
    boxSizer3->Add(m_stdBtnSizer5, 0, wxALL, WXC_FROM_DIP(5));
    
    m_button7 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer5->AddButton(m_button7);
    
    m_button9 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer5->AddButton(m_button9);
    m_stdBtnSizer5->Realize();
    
    SetName(wxT("OpcClientConfigurationDialogBase"));
    SetMinClientSize(wxSize(800,600));
    SetSize(wxDLG_UNIT(this, wxSize(800,600)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_button46->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(OpcClientConfigurationDialogBase::onAdd), NULL, this);
    m_button48->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(OpcClientConfigurationDialogBase::onRemove), NULL, this);
    m_button52->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(OpcClientConfigurationDialogBase::onBrowse), NULL, this);
    m_button9->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(OpcClientConfigurationDialogBase::onOk), NULL, this);
    
}

OpcClientConfigurationDialogBase::~OpcClientConfigurationDialogBase()
{
    m_button46->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(OpcClientConfigurationDialogBase::onAdd), NULL, this);
    m_button48->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(OpcClientConfigurationDialogBase::onRemove), NULL, this);
    m_button52->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(OpcClientConfigurationDialogBase::onBrowse), NULL, this);
    m_button9->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(OpcClientConfigurationDialogBase::onOk), NULL, this);
    
}

ClientBrowserDialogBase::ClientBrowserDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafter7Fz5K6InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer58 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer58);
    
    m_browseTree = new wxTreeCtrl(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTR_DEFAULT_STYLE);
    
    boxSizer58->Add(m_browseTree, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_stdBtnSizer62 = new wxStdDialogButtonSizer();
    
    boxSizer58->Add(m_stdBtnSizer62, 0, wxALL, WXC_FROM_DIP(5));
    
    m_button64 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer62->AddButton(m_button64);
    
    m_button66 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer62->AddButton(m_button66);
    m_stdBtnSizer62->Realize();
    
    SetName(wxT("ClientBrowserDialogBase"));
    SetMinClientSize(wxSize(600,600));
    SetSize(wxDLG_UNIT(this, wxSize(800,600)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_browseTree->Connect(wxEVT_COMMAND_TREE_SEL_CHANGED, wxTreeEventHandler(ClientBrowserDialogBase::onSelChanged), NULL, this);
    m_button66->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ClientBrowserDialogBase::onOk), NULL, this);
    
}

ClientBrowserDialogBase::~ClientBrowserDialogBase()
{
    m_browseTree->Disconnect(wxEVT_COMMAND_TREE_SEL_CHANGED, wxTreeEventHandler(ClientBrowserDialogBase::onSelChanged), NULL, this);
    m_button66->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ClientBrowserDialogBase::onOk), NULL, this);
    
}
