//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: SbcSupportUI.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "SbcSupportUI.h"


// Declare the bitmap loading function
extern void wxCrafterIKVz6HInitBitmapResources();

static bool bBitmapLoaded = false;


SbcSupportSetupDialogBase::SbcSupportSetupDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterIKVz6HInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer3 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer3);
    
    m_enableClockChange = new wxCheckBox(this, wxID_ANY, _("Enable Clock Change"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_enableClockChange->SetValue(false);
    m_enableClockChange->SetToolTip(_("Can change the clock from UI"));
    
    boxSizer3->Add(m_enableClockChange, 0, wxALL, WXC_FROM_DIP(5));
    
    m_enableHardwareClock = new wxCheckBox(this, wxID_ANY, _("Enable Hardware Clock"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_enableHardwareClock->SetValue(false);
    m_enableHardwareClock->SetToolTip(_("Use the hardware clock (in absence of NTP)"));
    
    boxSizer3->Add(m_enableHardwareClock, 0, wxALL, WXC_FROM_DIP(5));
    
    m_enableFactoryDefaults = new wxCheckBox(this, wxID_ANY, _("Enable Factory Defaults"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_enableFactoryDefaults->SetValue(false);
    m_enableFactoryDefaults->SetToolTip(_("Enable factory reset function"));
    
    boxSizer3->Add(m_enableFactoryDefaults, 0, wxALL, WXC_FROM_DIP(5));
    
    m_enableConsole = new wxCheckBox(this, wxID_ANY, _("Enable Console"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_enableConsole->SetValue(false);
    m_enableConsole->SetToolTip(_("Enable the application close function"));
    
    boxSizer3->Add(m_enableConsole, 0, wxALL, WXC_FROM_DIP(5));
    
    m_enableTabView = new wxCheckBox(this, wxID_ANY, _("Enable Tab View"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_enableTabView->SetValue(false);
    m_enableTabView->SetToolTip(_("Enable the ui in the tabs"));
    
    boxSizer3->Add(m_enableTabView, 0, wxALL, WXC_FROM_DIP(5));
    
    m_enableRestart = new wxCheckBox(this, wxID_ANY, _("Enable Restart"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_enableRestart->SetValue(false);
    
    boxSizer3->Add(m_enableRestart, 0, wxALL, WXC_FROM_DIP(5));
    
    m_enabled = new wxCheckBox(this, wxID_ANY, _("Enable Object"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_enabled->SetValue(false);
    m_enabled->SetToolTip(_("Object active"));
    
    boxSizer3->Add(m_enabled, 0, wxALL, WXC_FROM_DIP(5));
    
    boxSizer3->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));
    
    m_stdBtnSizer5 = new wxStdDialogButtonSizer();
    
    boxSizer3->Add(m_stdBtnSizer5, 0, wxALL, WXC_FROM_DIP(5));
    
    m_button7 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer5->AddButton(m_button7);
    
    m_button9 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer5->AddButton(m_button9);
    m_stdBtnSizer5->Realize();
    
    SetName(wxT("SbcSupportSetupDialogBase"));
    SetSize(500,300);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_button9->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SbcSupportSetupDialogBase::OnOK), NULL, this);
    
}

SbcSupportSetupDialogBase::~SbcSupportSetupDialogBase()
{
    m_button9->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SbcSupportSetupDialogBase::OnOK), NULL, this);
    
}

SbcSupportTabPanelBase::SbcSupportTabPanelBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterIKVz6HInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    gridSizer22 = new wxGridSizer(0, 2, 0, 0);
    this->SetSizer(gridSizer22);
    
    m_button24 = new wxButton(this, wxID_ANY, _("Set Time"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer22->Add(m_button24, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button26 = new wxButton(this, wxID_ANY, _("Open Console"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer22->Add(m_button26, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button28 = new wxButton(this, wxID_ANY, _("Restart"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer22->Add(m_button28, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button30 = new wxButton(this, wxID_ANY, _("Factory Defaults"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer22->Add(m_button30, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    SetBackgroundColour(wxColour(wxT("rgb(164,89,97)")));
    SetName(wxT("SbcSupportTabPanelBase"));
    SetSize(700,500);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    m_button24->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SbcSupportTabPanelBase::onSetTime), NULL, this);
    m_button26->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SbcSupportTabPanelBase::onOpenConsole), NULL, this);
    m_button28->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SbcSupportTabPanelBase::onRestart), NULL, this);
    m_button30->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SbcSupportTabPanelBase::onFactoryDefaults), NULL, this);
    
}

SbcSupportTabPanelBase::~SbcSupportTabPanelBase()
{
    m_button24->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SbcSupportTabPanelBase::onSetTime), NULL, this);
    m_button26->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SbcSupportTabPanelBase::onOpenConsole), NULL, this);
    m_button28->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SbcSupportTabPanelBase::onRestart), NULL, this);
    m_button30->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SbcSupportTabPanelBase::onFactoryDefaults), NULL, this);
    
}

SetClockBase::SetClockBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterIKVz6HInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer42 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer42);
    
    m_datePicker46 = new wxDatePickerCtrl(this, wxID_ANY, wxDefaultDateTime, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxDP_DEFAULT);
    wxFont m_datePicker46Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Noto Sans"));
    m_datePicker46->SetFont(m_datePicker46Font);
    
    boxSizer42->Add(m_datePicker46, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_timePickerCtrl44 = new wxTimePickerCtrl(this, wxID_ANY, wxDefaultDateTime, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTP_DEFAULT);
    wxFont m_timePickerCtrl44Font(20, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Noto Sans"));
    m_timePickerCtrl44->SetFont(m_timePickerCtrl44Font);
    
    boxSizer42->Add(m_timePickerCtrl44, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    gridSizer48 = new wxGridSizer(0, 2, 0, 0);
    
    boxSizer42->Add(gridSizer48, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button50 = new wxButton(this, wxID_ANY, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer48->Add(m_button50, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button52 = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer48->Add(m_button52, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    SetName(wxT("SetClockBase"));
    SetSize(500,300);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
}

SetClockBase::~SetClockBase()
{
}
