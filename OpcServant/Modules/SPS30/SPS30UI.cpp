//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: SPS30UI.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "SPS30UI.h"


// Declare the bitmap loading function
extern void wxCrafterHpJgPCInitBitmapResources();

static bool bBitmapLoaded = false;


SPS30SetupDialogBase::SPS30SetupDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterHpJgPCInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer15 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer15);
    
    m_panel622 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    boxSizer15->Add(m_panel622, 0, wxALL, WXC_FROM_DIP(5));
    
    flexGridSizer751 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer751->SetFlexibleDirection( wxBOTH );
    flexGridSizer751->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    m_panel622->SetSizer(flexGridSizer751);
    
    m_staticText753 = new wxStaticText(m_panel622, wxID_ANY, _("I2C Interface"), wxDefaultPosition, wxDLG_UNIT(m_panel622, wxSize(-1,-1)), 0);
    
    flexGridSizer751->Add(m_staticText753, 0, wxALL, WXC_FROM_DIP(5));
    
    m_buttonConfigure = new wxButton(m_panel622, wxID_ANY, _("Configure ..."), wxDefaultPosition, wxDLG_UNIT(m_panel622, wxSize(-1,-1)), 0);
    m_buttonConfigure->SetDefault();
    
    flexGridSizer751->Add(m_buttonConfigure, 0, wxALL, WXC_FROM_DIP(5));
    
    m_panel265 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL|wxBORDER_SIMPLE);
    
    boxSizer15->Add(m_panel265, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer280 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer280->SetFlexibleDirection( wxBOTH );
    flexGridSizer280->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer280->AddGrowableCol(1);
    flexGridSizer280->AddGrowableCol(3);
    flexGridSizer280->AddGrowableCol(5);
    m_panel265->SetSizer(flexGridSizer280);
    
    m_staticText282 = new wxStaticText(m_panel265, wxID_ANY, _("Measure Interval"), wxDefaultPosition, wxDLG_UNIT(m_panel265, wxSize(-1,-1)), 0);
    
    flexGridSizer280->Add(m_staticText282, 0, wxALL, WXC_FROM_DIP(5));
    
    m_MeasureInterval = new wxSpinCtrl(m_panel265, wxID_ANY, wxT("60"), wxDefaultPosition, wxDLG_UNIT(m_panel265, wxSize(-1,-1)), wxSP_ARROW_KEYS);
    m_MeasureInterval->SetRange(1, 600);
    m_MeasureInterval->SetValue(60);
    
    flexGridSizer280->Add(m_MeasureInterval, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText286 = new wxStaticText(m_panel265, wxID_ANY, _("Publish Interval"), wxDefaultPosition, wxDLG_UNIT(m_panel265, wxSize(-1,-1)), 0);
    
    flexGridSizer280->Add(m_staticText286, 0, wxALL, WXC_FROM_DIP(5));
    
    m_PublishInterval = new wxSpinCtrl(m_panel265, wxID_ANY, wxT("60"), wxDefaultPosition, wxDLG_UNIT(m_panel265, wxSize(-1,-1)), wxSP_ARROW_KEYS);
    m_PublishInterval->SetRange(1, 600);
    m_PublishInterval->SetValue(60);
    
    flexGridSizer280->Add(m_PublishInterval, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_Enabled = new wxCheckBox(m_panel265, wxID_ANY, _("Enabled"), wxDefaultPosition, wxDLG_UNIT(m_panel265, wxSize(-1,-1)), 0);
    m_Enabled->SetValue(false);
    
    flexGridSizer280->Add(m_Enabled, 0, wxALL, WXC_FROM_DIP(5));
    
    m_EnableTabView = new wxCheckBox(m_panel265, wxID_ANY, _("Enable Tab View"), wxDefaultPosition, wxDLG_UNIT(m_panel265, wxSize(-1,-1)), 0);
    m_EnableTabView->SetValue(false);
    
    flexGridSizer280->Add(m_EnableTabView, 0, wxALL, WXC_FROM_DIP(5));
    
    m_stdBtnSizer33 = new wxStdDialogButtonSizer();
    
    boxSizer15->Add(m_stdBtnSizer33, 0, wxALL, WXC_FROM_DIP(5));
    
    m_button35 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer33->AddButton(m_button35);
    
    m_button37 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_button37->SetDefault();
    m_stdBtnSizer33->AddButton(m_button37);
    m_stdBtnSizer33->Realize();
    
    SetName(wxT("SPS30SetupDialogBase"));
    SetSize(wxDLG_UNIT(this, wxSize(300,300)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_buttonConfigure->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SPS30SetupDialogBase::onConfigure), NULL, this);
    m_button37->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SPS30SetupDialogBase::onOk), NULL, this);
    
}

SPS30SetupDialogBase::~SPS30SetupDialogBase()
{
    m_buttonConfigure->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SPS30SetupDialogBase::onConfigure), NULL, this);
    m_button37->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SPS30SetupDialogBase::onOk), NULL, this);
    
}

Sps30PanelBase::Sps30PanelBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterHpJgPCInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer759 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer759);
    
    m_grid = new wxGrid(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxWANTS_CHARS);
    m_grid->CreateGrid(0, 0);
    m_grid->SetRowLabelAlignment(wxALIGN_RIGHT, wxALIGN_CENTRE);
    m_grid->SetColLabelAlignment(wxALIGN_CENTRE, wxALIGN_CENTRE);
    #if wxVERSION_NUMBER >= 2904
    m_grid->UseNativeColHeader(true);
    #endif
    m_grid->EnableEditing(true);
    
    boxSizer759->Add(m_grid, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    SetName(wxT("Sps30PanelBase"));
    SetSize(wxDLG_UNIT(this, wxSize(500,300)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
}

Sps30PanelBase::~Sps30PanelBase()
{
}
