//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: ValuesUI.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "ValuesUI.h"


// Declare the bitmap loading function
extern void wxCrafterxH0hAmInitBitmapResources();

static bool bBitmapLoaded = false;


ValueConfigurationDialogBase::ValueConfigurationDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterxH0hAmInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer181 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer181);
    
    flexGridSizer183 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer183->SetFlexibleDirection( wxBOTH );
    flexGridSizer183->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer183->AddGrowableCol(1);
    
    boxSizer181->Add(flexGridSizer183, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText185 = new wxStaticText(this, wxID_ANY, _("Source"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer183->Add(m_staticText185, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_objectArr;
    m_object = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_objectArr, 0);
    
    flexGridSizer183->Add(m_object, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText189 = new wxStaticText(this, wxID_ANY, _("Scale"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer183->Add(m_staticText189, 0, wxALL, WXC_FROM_DIP(5));
    
    m_scale = new wxSpinCtrlDouble(this, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxSP_ARROW_KEYS);
    m_scale->SetRange(0, 100);
    m_scale->SetValue(0);
    
    flexGridSizer183->Add(m_scale, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText193 = new wxStaticText(this, wxID_ANY, _("Offset"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer183->Add(m_staticText193, 0, wxALL, WXC_FROM_DIP(5));
    
    m_offset = new wxSpinCtrlDouble(this, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxSP_ARROW_KEYS);
    m_offset->SetRange(0, 100);
    m_offset->SetValue(0);
    
    flexGridSizer183->Add(m_offset, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer197 = new wxFlexGridSizer(0, 3, 0, 0);
    flexGridSizer197->SetFlexibleDirection( wxBOTH );
    flexGridSizer197->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer197->AddGrowableCol(1);
    
    boxSizer181->Add(flexGridSizer197, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText199 = new wxStaticText(this, wxID_ANY, _("HiHi"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer197->Add(m_staticText199, 0, wxALL, WXC_FROM_DIP(5));
    
    m_hihi = new wxSpinCtrlDouble(this, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxSP_ARROW_KEYS);
    m_hihi->SetRange(0, 100);
    m_hihi->SetValue(0);
    
    flexGridSizer197->Add(m_hihi, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_hihiEnabled = new wxCheckBox(this, wxID_ANY, _("Enabled"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_hihiEnabled->SetValue(false);
    
    flexGridSizer197->Add(m_hihiEnabled, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText205 = new wxStaticText(this, wxID_ANY, _("HiLo"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer197->Add(m_staticText205, 0, wxALL, WXC_FROM_DIP(5));
    
    m_hilo = new wxSpinCtrlDouble(this, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxSP_ARROW_KEYS);
    m_hilo->SetRange(0, 100);
    m_hilo->SetValue(0);
    
    flexGridSizer197->Add(m_hilo, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_hiloEnabled = new wxCheckBox(this, wxID_ANY, _("Enabled"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_hiloEnabled->SetValue(false);
    
    flexGridSizer197->Add(m_hiloEnabled, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText211 = new wxStaticText(this, wxID_ANY, _("LoHi"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer197->Add(m_staticText211, 0, wxALL, WXC_FROM_DIP(5));
    
    m_lohi = new wxSpinCtrlDouble(this, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxSP_ARROW_KEYS);
    m_lohi->SetRange(0, 100);
    m_lohi->SetValue(0);
    
    flexGridSizer197->Add(m_lohi, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_lohiEnabled = new wxCheckBox(this, wxID_ANY, _("Enabled"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_lohiEnabled->SetValue(false);
    
    flexGridSizer197->Add(m_lohiEnabled, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText217 = new wxStaticText(this, wxID_ANY, _("LoLo"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer197->Add(m_staticText217, 0, wxALL, WXC_FROM_DIP(5));
    
    m_lolo = new wxSpinCtrlDouble(this, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxSP_ARROW_KEYS);
    m_lolo->SetRange(0, 100);
    m_lolo->SetValue(0);
    
    flexGridSizer197->Add(m_lolo, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_loloEnabled = new wxCheckBox(this, wxID_ANY, _("Enabled"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_loloEnabled->SetValue(false);
    
    flexGridSizer197->Add(m_loloEnabled, 0, wxALL, WXC_FROM_DIP(5));
    
    m_stdBtnSizer225 = new wxStdDialogButtonSizer();
    
    boxSizer181->Add(m_stdBtnSizer225, 0, wxALL, WXC_FROM_DIP(5));
    
    m_button227 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer225->AddButton(m_button227);
    
    m_button229 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer225->AddButton(m_button229);
    m_stdBtnSizer225->Realize();
    
    SetName(wxT("ValueConfigurationDialogBase"));
    SetMinClientSize(wxSize(500,500));
    SetSize(wxDLG_UNIT(this, wxSize(500,500)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_button229->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ValueConfigurationDialogBase::onOk), NULL, this);
    
}

ValueConfigurationDialogBase::~ValueConfigurationDialogBase()
{
    m_button229->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ValueConfigurationDialogBase::onOk), NULL, this);
    
}

ValueSelectAliasDialogBase::ValueSelectAliasDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterxH0hAmInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer68 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer68);
    
    flexGridSizer70 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer70->SetFlexibleDirection( wxBOTH );
    flexGridSizer70->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer70->AddGrowableCol(1);
    
    boxSizer68->Add(flexGridSizer70, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText72 = new wxStaticText(this, wxID_ANY, _("Alias"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer70->Add(m_staticText72, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_aliasListArr;
    m_aliasList = new wxComboBox(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_aliasListArr, 0);
    #if wxVERSION_NUMBER >= 3000
    m_aliasList->SetHint(wxT(""));
    #endif
    
    flexGridSizer70->Add(m_aliasList, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_stdBtnSizer76 = new wxStdDialogButtonSizer();
    
    boxSizer68->Add(m_stdBtnSizer76, 0, wxALL, WXC_FROM_DIP(5));
    
    m_button78 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer76->AddButton(m_button78);
    
    m_button80 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer76->AddButton(m_button80);
    m_stdBtnSizer76->Realize();
    
    SetName(wxT("ValueSelectAliasDialogBase"));
    SetSize(wxDLG_UNIT(this, wxSize(500,300)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_button78->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ValueSelectAliasDialogBase::onOk), NULL, this);
    
}

ValueSelectAliasDialogBase::~ValueSelectAliasDialogBase()
{
    m_button78->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ValueSelectAliasDialogBase::onOk), NULL, this);
    
}

ValueGroupConfigurationDialogBase::ValueGroupConfigurationDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterxH0hAmInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer84 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer84);
    
    m_panel86 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    boxSizer84->Add(m_panel86, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    gridBagSizer94 = new wxGridBagSizer(0, 0);
    m_panel86->SetSizer(gridBagSizer94);
    
    wxArrayString m_listValuesArr;
    m_listValues = new wxListBox(m_panel86, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel86, wxSize(-1,-1)), m_listValuesArr, wxLB_SINGLE);
    
    gridBagSizer94->Add(m_listValues, wxGBPosition(0,0), wxGBSpan(4,1), wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button98 = new wxButton(m_panel86, wxID_ANY, _("Add ..."), wxDefaultPosition, wxDLG_UNIT(m_panel86, wxSize(-1,-1)), 0);
    
    gridBagSizer94->Add(m_button98, wxGBPosition(0,1), wxGBSpan(1,1), wxALL, WXC_FROM_DIP(5));
    
    m_button100 = new wxButton(m_panel86, wxID_ANY, _("Edit ..."), wxDefaultPosition, wxDLG_UNIT(m_panel86, wxSize(-1,-1)), 0);
    
    gridBagSizer94->Add(m_button100, wxGBPosition(1,1), wxGBSpan(1,1), wxALL, WXC_FROM_DIP(5));
    
    m_button102 = new wxButton(m_panel86, wxID_ANY, _("Remove"), wxDefaultPosition, wxDLG_UNIT(m_panel86, wxSize(-1,-1)), 0);
    
    gridBagSizer94->Add(m_button102, wxGBPosition(2,1), wxGBSpan(1,1), wxALL, WXC_FROM_DIP(5));
    
    m_button116 = new wxButton(m_panel86, wxID_ANY, _("Alias ..."), wxDefaultPosition, wxDLG_UNIT(m_panel86, wxSize(-1,-1)), 0);
    
    gridBagSizer94->Add(m_button116, wxGBPosition(3,1), wxGBSpan(1,1), wxALL, WXC_FROM_DIP(5));
    
    flexGridSizer122 = new wxFlexGridSizer(0, 5, 0, 0);
    flexGridSizer122->SetFlexibleDirection( wxBOTH );
    flexGridSizer122->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    gridBagSizer94->Add(flexGridSizer122, wxGBPosition(4,0), wxGBSpan(1,1), wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText124 = new wxStaticText(m_panel86, wxID_ANY, _("Measure Interval"), wxDefaultPosition, wxDLG_UNIT(m_panel86, wxSize(-1,-1)), 0);
    
    flexGridSizer122->Add(m_staticText124, 0, wxALL, WXC_FROM_DIP(5));
    
    m_measureInterval = new wxSpinCtrl(m_panel86, wxID_ANY, wxT("60"), wxDefaultPosition, wxDLG_UNIT(m_panel86, wxSize(-1,-1)), wxSP_ARROW_KEYS);
    m_measureInterval->SetRange(0, 10000);
    m_measureInterval->SetValue(60);
    
    flexGridSizer122->Add(m_measureInterval, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText128 = new wxStaticText(m_panel86, wxID_ANY, _("Publish Interval"), wxDefaultPosition, wxDLG_UNIT(m_panel86, wxSize(-1,-1)), 0);
    
    flexGridSizer122->Add(m_staticText128, 0, wxALL, WXC_FROM_DIP(5));
    
    m_publishInterval = new wxSpinCtrl(m_panel86, wxID_ANY, wxT("60"), wxDefaultPosition, wxDLG_UNIT(m_panel86, wxSize(-1,-1)), wxSP_ARROW_KEYS);
    m_publishInterval->SetRange(10, 10000);
    m_publishInterval->SetValue(60);
    
    flexGridSizer122->Add(m_publishInterval, 0, wxALL, WXC_FROM_DIP(5));
    
    m_enabled = new wxCheckBox(m_panel86, wxID_ANY, _("Enabled"), wxDefaultPosition, wxDLG_UNIT(m_panel86, wxSize(-1,-1)), 0);
    m_enabled->SetValue(false);
    
    flexGridSizer122->Add(m_enabled, 0, wxALL, WXC_FROM_DIP(5));
    
    m_enableTabView = new wxCheckBox(m_panel86, wxID_ANY, _("Enable Tab View"), wxDefaultPosition, wxDLG_UNIT(m_panel86, wxSize(-1,-1)), 0);
    m_enableTabView->SetValue(false);
    
    flexGridSizer122->Add(m_enableTabView, 0, wxALL, WXC_FROM_DIP(5));
    gridBagSizer94->AddGrowableCol(0);
    gridBagSizer94->AddGrowableRow(3);
    m_stdBtnSizer88 = new wxStdDialogButtonSizer();
    
    boxSizer84->Add(m_stdBtnSizer88, 0, wxALL, WXC_FROM_DIP(5));
    
    m_button90 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer88->AddButton(m_button90);
    
    m_button92 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer88->AddButton(m_button92);
    m_stdBtnSizer88->Realize();
    
    SetName(wxT("ValueGroupConfigurationDialogBase"));
    SetSize(wxDLG_UNIT(this, wxSize(800,600)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_button98->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ValueGroupConfigurationDialogBase::onAdd), NULL, this);
    m_button100->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ValueGroupConfigurationDialogBase::onEdit), NULL, this);
    m_button102->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ValueGroupConfigurationDialogBase::onRemove), NULL, this);
    m_button116->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ValueGroupConfigurationDialogBase::onAlias), NULL, this);
    m_button90->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ValueGroupConfigurationDialogBase::onOk), NULL, this);
    
}

ValueGroupConfigurationDialogBase::~ValueGroupConfigurationDialogBase()
{
    m_button98->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ValueGroupConfigurationDialogBase::onAdd), NULL, this);
    m_button100->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ValueGroupConfigurationDialogBase::onEdit), NULL, this);
    m_button102->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ValueGroupConfigurationDialogBase::onRemove), NULL, this);
    m_button116->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ValueGroupConfigurationDialogBase::onAlias), NULL, this);
    m_button90->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ValueGroupConfigurationDialogBase::onOk), NULL, this);
    
}

ValueGroupPanelBase::ValueGroupPanelBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterxH0hAmInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer136 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer136);
    
    m_Values = new wxGrid(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxWANTS_CHARS);
    m_Values->CreateGrid(0, 5);
    m_Values->SetColLabelValue(0, _("Current"));
    m_Values->SetColLabelValue(1, _("Mean"));
    m_Values->SetColLabelValue(2, _("Minimum"));
    m_Values->SetColLabelValue(3, _("Maximum"));
    m_Values->SetColLabelValue(4, _("State"));
    m_Values->SetRowLabelAlignment(wxALIGN_RIGHT, wxALIGN_CENTRE);
    m_Values->SetColLabelAlignment(wxALIGN_CENTRE, wxALIGN_CENTRE);
    #if wxVERSION_NUMBER >= 2904
    m_Values->UseNativeColHeader(true);
    #endif
    m_Values->EnableEditing(true);
    
    boxSizer136->Add(m_Values, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_status = new wxStaticText(this, wxID_ANY, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer136->Add(m_status, 0, wxALL, WXC_FROM_DIP(5));
    
    m_periodicTimer = new wxTimer;
    m_periodicTimer->Start(1000, false);
    
    SetName(wxT("ValueGroupPanelBase"));
    SetSize(wxDLG_UNIT(this, wxSize(800,600)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    m_Values->Connect(wxEVT_SIZE, wxSizeEventHandler(ValueGroupPanelBase::onSizeGrid), NULL, this);
    m_periodicTimer->Connect(wxEVT_TIMER, wxTimerEventHandler(ValueGroupPanelBase::onPeriodicTimer), NULL, this);
    
}

ValueGroupPanelBase::~ValueGroupPanelBase()
{
    m_Values->Disconnect(wxEVT_SIZE, wxSizeEventHandler(ValueGroupPanelBase::onSizeGrid), NULL, this);
    m_periodicTimer->Disconnect(wxEVT_TIMER, wxTimerEventHandler(ValueGroupPanelBase::onPeriodicTimer), NULL, this);
    
    m_periodicTimer->Stop();
    wxDELETE( m_periodicTimer );

}
