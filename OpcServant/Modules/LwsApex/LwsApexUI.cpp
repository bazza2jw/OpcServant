//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: LwsApexUI.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "LwsApexUI.h"


// Declare the bitmap loading function
extern void wxCrafterydm7r3InitBitmapResources();

static bool bBitmapLoaded = false;


LwsApexConfigurationDialogBase::LwsApexConfigurationDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterydm7r3InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer3 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer3);
    
    flexGridSizer5 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer5->SetFlexibleDirection( wxBOTH );
    flexGridSizer5->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    boxSizer3->Add(flexGridSizer5, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText39 = new wxStaticText(this, wxID_ANY, _("Address"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer5->Add(m_staticText39, 0, wxALL, WXC_FROM_DIP(5));
    
    m_address = new wxTextCtrl(this, wxID_ANY, wxT("localhost"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_address->SetHint(wxT(""));
    #endif
    
    flexGridSizer5->Add(m_address, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText7 = new wxStaticText(this, wxID_ANY, _("Purge Time (s)"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer5->Add(m_staticText7, 0, wxALL, WXC_FROM_DIP(5));
    
    m_purgeTime = new wxSpinCtrl(this, wxID_ANY, wxT("1"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxSP_ARROW_KEYS);
    m_purgeTime->SetRange(1, 100);
    m_purgeTime->SetValue(1);
    
    flexGridSizer5->Add(m_purgeTime, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText11 = new wxStaticText(this, wxID_ANY, _("Sample Time (s)"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer5->Add(m_staticText11, 0, wxALL, WXC_FROM_DIP(5));
    
    m_sampleTime = new wxSpinCtrl(this, wxID_ANY, wxT("60"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxSP_ARROW_KEYS);
    m_sampleTime->SetRange(10, 600);
    m_sampleTime->SetValue(60);
    
    flexGridSizer5->Add(m_sampleTime, 0, wxALL, WXC_FROM_DIP(5));
    
    m_Enabled = new wxCheckBox(this, wxID_ANY, _("Enabled"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_Enabled->SetValue(false);
    
    flexGridSizer5->Add(m_Enabled, 0, wxALL, WXC_FROM_DIP(5));
    
    m_stdBtnSizer15 = new wxStdDialogButtonSizer();
    
    boxSizer3->Add(m_stdBtnSizer15, 0, wxALL, WXC_FROM_DIP(5));
    
    m_button17 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_button17->SetDefault();
    m_stdBtnSizer15->AddButton(m_button17);
    
    m_button19 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer15->AddButton(m_button19);
    m_stdBtnSizer15->Realize();
    
    SetName(wxT("LwsApexConfigurationDialogBase"));
    SetSize(wxDLG_UNIT(this, wxSize(500,300)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_button17->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(LwsApexConfigurationDialogBase::onOk), NULL, this);
    
}

LwsApexConfigurationDialogBase::~LwsApexConfigurationDialogBase()
{
    m_button17->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(LwsApexConfigurationDialogBase::onOk), NULL, this);
    
}

LwsApexPanelBase::LwsApexPanelBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterydm7r3InitBitmapResources();
        bBitmapLoaded = true;
    }
    wxFont thisFont(20, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Ubuntu"));
    this->SetFont(thisFont);
    
    gridSizer25 = new wxGridSizer(0, 2, 0, 0);
    this->SetSizer(gridSizer25);
    
    m_staticText27 = new wxStaticText(this, wxID_ANY, _("0.5 um"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer25->Add(m_staticText27, 0, wxALL, WXC_FROM_DIP(5));
    
    m_value_0_5 = new wxStaticText(this, wxID_ANY, _("0.0"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer25->Add(m_value_0_5, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText31 = new wxStaticText(this, wxID_ANY, _("5.0 um"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer25->Add(m_staticText31, 0, wxALL, WXC_FROM_DIP(5));
    
    m_value_5_0 = new wxStaticText(this, wxID_ANY, _("0.0"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer25->Add(m_value_5_0, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText35 = new wxStaticText(this, wxID_ANY, _("Status"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer25->Add(m_staticText35, 0, wxALL, WXC_FROM_DIP(5));
    
    m_status = new wxStaticText(this, wxID_ANY, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer25->Add(m_status, 0, wxALL, WXC_FROM_DIP(5));
    
    SetName(wxT("LwsApexPanelBase"));
    SetSize(wxDLG_UNIT(this, wxSize(500,300)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
}

LwsApexPanelBase::~LwsApexPanelBase()
{
}
