//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: NodeEditor.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "NodeEditor.h"


// Declare the bitmap loading function
extern void wxCrafterY8Mp03InitBitmapResources();

static bool bBitmapLoaded = false;


NodeEditorMainframeBase::NodeEditorMainframeBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxMDIParentFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterY8Mp03InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    m_menuBar = new wxMenuBar(0);
    this->SetMenuBar(m_menuBar);
    
    m_menuFile = new wxMenu();
    m_menuBar->Append(m_menuFile, _("File"));
    
    m_menuItem153 = new wxMenuItem(m_menuFile, wxID_NEW, _("New Context"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItem153);
    
    m_menuItemExit = new wxMenuItem(m_menuFile, wxID_ANY, _("Exit"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemExit);
    
    SetName(wxT("NodeEditorMainframeBase"));
    SetSize(wxDLG_UNIT(this, wxSize(800,600)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    this->Connect(m_menuItem153->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(NodeEditorMainframeBase::onNew), NULL, this);
    this->Connect(m_menuItemExit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(NodeEditorMainframeBase::onExit), NULL, this);
    
}

NodeEditorMainframeBase::~NodeEditorMainframeBase()
{
    this->Disconnect(m_menuItem153->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(NodeEditorMainframeBase::onNew), NULL, this);
    this->Disconnect(m_menuItemExit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(NodeEditorMainframeBase::onExit), NULL, this);
    
}

NodeEditorPanelBase::NodeEditorPanelBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterY8Mp03InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer67 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer67);
    
    m_splitter = new wxSplitterWindow(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxSP_3DBORDER|wxSP_3DSASH|wxSP_3D);
    m_splitter->SetSashGravity(0.5);
    m_splitter->SetMinimumPaneSize(10);
    
    boxSizer67->Add(m_splitter, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_splitterLeft = new wxPanel(m_splitter, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    boxSizer85 = new wxBoxSizer(wxVERTICAL);
    m_splitterLeft->SetSizer(boxSizer85);
    
    m_nodeTypes = new wxTreeCtrl(m_splitterLeft, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterLeft, wxSize(-1,-1)), wxTR_DEFAULT_STYLE);
    m_nodeTypes->SetToolTip(_("Node Type List"));
    
    boxSizer85->Add(m_nodeTypes, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_listTraceArr;
    m_listTrace = new wxListBox(m_splitterLeft, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterLeft, wxSize(-1,-1)), m_listTraceArr, wxLB_SINGLE);
    
    boxSizer85->Add(m_listTrace, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button237 = new wxButton(m_splitterLeft, wxID_ANY, _("Clear"), wxDefaultPosition, wxDLG_UNIT(m_splitterLeft, wxSize(-1,-1)), 0);
    
    boxSizer85->Add(m_button237, 0, wxALL, WXC_FROM_DIP(5));
    
    m_splitterRight = new wxPanel(m_splitter, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_splitter->SplitVertically(m_splitterLeft, m_splitterRight, 0);
    
    canvasSizer = new wxBoxSizer(wxVERTICAL);
    m_splitterRight->SetSizer(canvasSizer);
    
    m_toolbar173 = new wxToolBar(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTB_FLAT);
    m_toolbar173->SetToolBitmapSize(wxSize(16,16));
    
    boxSizer67->Add(m_toolbar173, 0, wxALL, WXC_FROM_DIP(5));
    
    m_toolbar173->AddTool(wxID_OPEN, _("Tool Label"), wxArtProvider::GetBitmap(wxART_FILE_OPEN, wxART_TOOLBAR, wxDefaultSize), wxNullBitmap, wxITEM_NORMAL, wxT(""), wxT(""), NULL);
    
    m_toolbar173->AddTool(wxID_SAVE, _("Tool Label"), wxArtProvider::GetBitmap(wxART_FILE_SAVE, wxART_TOOLBAR, wxDefaultSize), wxNullBitmap, wxITEM_NORMAL, wxT(""), wxT(""), NULL);
    
    m_toolbar173->AddTool(wxID_SAVEAS, _("Tool Label"), wxArtProvider::GetBitmap(wxART_FILE_SAVE_AS, wxART_TOOLBAR, wxDefaultSize), wxNullBitmap, wxITEM_NORMAL, wxT(""), wxT(""), NULL);
    
    m_toolbar173->AddTool(wxID_CLEAR, _("Tool Label"), wxArtProvider::GetBitmap(wxART_NEW, wxART_TOOLBAR, wxDefaultSize), wxNullBitmap, wxITEM_NORMAL, _("Clear"), wxT(""), NULL);
    
    m_toggleEdit = new wxToggleButton(m_toolbar173, wxID_ANY, _("Edit/Run"), wxDefaultPosition, wxDLG_UNIT(m_toolbar173, wxSize(-1,-1)), 0);
    m_toggleEdit->SetValue(false);
    m_toolbar173->AddControl(m_toggleEdit);
    
    m_buttonStart = new wxButton(m_toolbar173, wxID_ANY, _("Start"), wxDefaultPosition, wxDLG_UNIT(m_toolbar173, wxSize(-1,-1)), 0);
    m_buttonStart->Enable(false);
    m_toolbar173->AddControl(m_buttonStart);
    
    m_buttonStep = new wxButton(m_toolbar173, wxID_ANY, _("Step"), wxDefaultPosition, wxDLG_UNIT(m_toolbar173, wxSize(-1,-1)), 0);
    m_buttonStep->Enable(false);
    m_toolbar173->AddControl(m_buttonStep);
    
    m_buttonTrigger = new wxButton(m_toolbar173, wxID_ANY, _("Trigger"), wxDefaultPosition, wxDLG_UNIT(m_toolbar173, wxSize(-1,-1)), 0);
    m_buttonTrigger->Enable(false);
    m_toolbar173->AddControl(m_buttonTrigger);
    
    m_buttonRun = new wxButton(m_toolbar173, wxID_ANY, _("Run"), wxDefaultPosition, wxDLG_UNIT(m_toolbar173, wxSize(-1,-1)), 0);
    m_buttonRun->Enable(false);
    m_toolbar173->AddControl(m_buttonRun);
    
    m_timerInterval = new wxSpinCtrl(m_toolbar173, wxID_ANY, wxT("100"), wxDefaultPosition, wxDLG_UNIT(m_toolbar173, wxSize(-1,-1)), wxSP_ARROW_KEYS);
    m_timerInterval->SetToolTip(_("Interval"));
    m_timerInterval->Enable(false);
    m_timerInterval->SetRange(100, 1000);
    m_timerInterval->SetValue(100);
    m_toolbar173->AddControl(m_timerInterval);
    
    m_buttonInject = new wxButton(m_toolbar173, wxID_ANY, _("Inject"), wxDefaultPosition, wxDLG_UNIT(m_toolbar173, wxSize(-1,-1)), 0);
    m_toolbar173->AddControl(m_buttonInject);
    m_toolbar173->Realize();
    
    m_timerStep = new wxTimer;
    
    SetName(wxT("NodeEditorPanelBase"));
    SetSize(wxDLG_UNIT(this, wxSize(800,600)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    m_button237->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(NodeEditorPanelBase::onClear), NULL, this);
    this->Connect(wxID_OPEN, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(NodeEditorPanelBase::onOpen), NULL, this);
    this->Connect(wxID_SAVE, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(NodeEditorPanelBase::onSave), NULL, this);
    this->Connect(wxID_SAVEAS, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(NodeEditorPanelBase::onSaveAs), NULL, this);
    this->Connect(wxID_CLEAR, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(NodeEditorPanelBase::onClear), NULL, this);
    m_toggleEdit->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(NodeEditorPanelBase::onEditRun), NULL, this);
    m_buttonStart->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(NodeEditorPanelBase::onStartSet), NULL, this);
    m_buttonStep->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(NodeEditorPanelBase::onStep), NULL, this);
    m_buttonTrigger->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(NodeEditorPanelBase::onTrigger), NULL, this);
    m_buttonRun->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(NodeEditorPanelBase::onRun), NULL, this);
    m_buttonInject->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(NodeEditorPanelBase::onInject), NULL, this);
    m_timerStep->Connect(wxEVT_TIMER, wxTimerEventHandler(NodeEditorPanelBase::onTimer), NULL, this);
    
}

NodeEditorPanelBase::~NodeEditorPanelBase()
{
    m_button237->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(NodeEditorPanelBase::onClear), NULL, this);
    this->Disconnect(wxID_OPEN, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(NodeEditorPanelBase::onOpen), NULL, this);
    this->Disconnect(wxID_SAVE, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(NodeEditorPanelBase::onSave), NULL, this);
    this->Disconnect(wxID_SAVEAS, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(NodeEditorPanelBase::onSaveAs), NULL, this);
    this->Disconnect(wxID_CLEAR, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(NodeEditorPanelBase::onClear), NULL, this);
    m_toggleEdit->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(NodeEditorPanelBase::onEditRun), NULL, this);
    m_buttonStart->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(NodeEditorPanelBase::onStartSet), NULL, this);
    m_buttonStep->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(NodeEditorPanelBase::onStep), NULL, this);
    m_buttonTrigger->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(NodeEditorPanelBase::onTrigger), NULL, this);
    m_buttonRun->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(NodeEditorPanelBase::onRun), NULL, this);
    m_buttonInject->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(NodeEditorPanelBase::onInject), NULL, this);
    m_timerStep->Disconnect(wxEVT_TIMER, wxTimerEventHandler(NodeEditorPanelBase::onTimer), NULL, this);
    
    m_timerStep->Stop();
    wxDELETE( m_timerStep );

}

NodeFlowEditorDialogBase::NodeFlowEditorDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterY8Mp03InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    PanelSizer = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(PanelSizer);
    
    m_toolbar195 = new wxToolBar(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTB_FLAT);
    m_toolbar195->SetToolBitmapSize(wxSize(16,16));
    
    PanelSizer->Add(m_toolbar195, 0, wxALL, WXC_FROM_DIP(5));
    
    m_toolbar195->AddTool(wxID_OPEN, _("Tool Label"), wxArtProvider::GetBitmap(wxART_FILE_OPEN, wxART_TOOLBAR, wxDefaultSize), wxNullBitmap, wxITEM_NORMAL, wxT(""), wxT(""), NULL);
    
    m_toolbar195->AddTool(wxID_SAVE, _("Tool Label"), wxArtProvider::GetBitmap(wxART_FILE_SAVE, wxART_TOOLBAR, wxDefaultSize), wxNullBitmap, wxITEM_NORMAL, wxT(""), wxT(""), NULL);
    
    m_toolbar195->AddTool(wxID_SAVEAS, _("Tool Label"), wxArtProvider::GetBitmap(wxART_FILE_SAVE_AS, wxART_TOOLBAR, wxDefaultSize), wxNullBitmap, wxITEM_NORMAL, wxT(""), wxT(""), NULL);
    m_toolbar195->Realize();
    
    m_stdBtnSizer189 = new wxStdDialogButtonSizer();
    
    PanelSizer->Add(m_stdBtnSizer189, 0, wxALL, WXC_FROM_DIP(5));
    
    m_button191 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer189->AddButton(m_button191);
    
    m_button193 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer189->AddButton(m_button193);
    m_stdBtnSizer189->Realize();
    
    SetName(wxT("NodeFlowEditorDialogBase"));
    SetSize(wxDLG_UNIT(this, wxSize(800,600)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    this->Connect(wxID_OPEN, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(NodeFlowEditorDialogBase::onOpen), NULL, this);
    this->Connect(wxID_SAVE, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(NodeFlowEditorDialogBase::onSave), NULL, this);
    this->Connect(wxID_SAVEAS, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(NodeFlowEditorDialogBase::onSaveAs), NULL, this);
    m_button193->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(NodeFlowEditorDialogBase::onOk), NULL, this);
    
}

NodeFlowEditorDialogBase::~NodeFlowEditorDialogBase()
{
    this->Disconnect(wxID_OPEN, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(NodeFlowEditorDialogBase::onOpen), NULL, this);
    this->Disconnect(wxID_SAVE, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(NodeFlowEditorDialogBase::onSave), NULL, this);
    this->Disconnect(wxID_SAVEAS, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(NodeFlowEditorDialogBase::onSaveAs), NULL, this);
    m_button193->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(NodeFlowEditorDialogBase::onOk), NULL, this);
    
}
