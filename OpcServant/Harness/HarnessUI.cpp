//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: HarnessUI.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "HarnessUI.h"


// Declare the bitmap loading function
extern void wxCrafterwLO2oXInitBitmapResources();

static bool bBitmapLoaded = false;


HarnessTestDialogBase::HarnessTestDialogBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterwLO2oXInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    boxSizer3 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer3);
    
    m_panel5 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    boxSizer3->Add(m_panel5, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    boxSizer15 = new wxBoxSizer(wxVERTICAL);
    m_panel5->SetSizer(boxSizer15);
    
    m_filePicker = new wxFilePickerCtrl(m_panel5, wxID_ANY, wxEmptyString, _("Select a file"), wxT("*.DB"), wxDefaultPosition, wxDLG_UNIT(m_panel5, wxSize(-1,-1)), wxFLP_DEFAULT_STYLE|wxFLP_SMALL|wxFLP_FILE_MUST_EXIST|wxFLP_OPEN);
    
    boxSizer15->Add(m_filePicker, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    gridSizer29 = new wxGridSizer(0, 2, 0, 0);
    
    boxSizer15->Add(gridSizer29, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button23 = new wxButton(m_panel5, wxID_ANY, _("Forwards"), wxDefaultPosition, wxDLG_UNIT(m_panel5, wxSize(-1,-1)), 0);
    
    gridSizer29->Add(m_button23, 0, wxALL, WXC_FROM_DIP(5));
    
    m_button31 = new wxButton(m_panel5, wxID_ANY, _("Backwards"), wxDefaultPosition, wxDLG_UNIT(m_panel5, wxSize(-1,-1)), 0);
    
    gridSizer29->Add(m_button31, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_listArr;
    m_list = new wxListBox(m_panel5, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel5, wxSize(-1,-1)), m_listArr, wxLB_SINGLE);
    
    boxSizer15->Add(m_list, 3, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_stdBtnSizer9 = new wxStdDialogButtonSizer();
    
    boxSizer3->Add(m_stdBtnSizer9, 0, wxALL, WXC_FROM_DIP(5));
    
    m_button11 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer9->AddButton(m_button11);
    
    m_button13 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer9->AddButton(m_button13);
    m_stdBtnSizer9->Realize();
    
    SetName(wxT("HarnessTestDialogBase"));
    SetMinClientSize(wxSize(500,300));
    SetSize(wxDLG_UNIT(this, wxSize(800,600)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_filePicker->Connect(wxEVT_COMMAND_FILEPICKER_CHANGED, wxFileDirPickerEventHandler(HarnessTestDialogBase::onFileSelected), NULL, this);
    m_button23->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(HarnessTestDialogBase::onForwards), NULL, this);
    m_button31->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(HarnessTestDialogBase::onBackwards), NULL, this);
    m_button11->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(HarnessTestDialogBase::onOk), NULL, this);
    m_button13->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(HarnessTestDialogBase::onCancel), NULL, this);
    
}

HarnessTestDialogBase::~HarnessTestDialogBase()
{
    m_filePicker->Disconnect(wxEVT_COMMAND_FILEPICKER_CHANGED, wxFileDirPickerEventHandler(HarnessTestDialogBase::onFileSelected), NULL, this);
    m_button23->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(HarnessTestDialogBase::onForwards), NULL, this);
    m_button31->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(HarnessTestDialogBase::onBackwards), NULL, this);
    m_button11->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(HarnessTestDialogBase::onOk), NULL, this);
    m_button13->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(HarnessTestDialogBase::onCancel), NULL, this);
    
}
